/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Merchant,
  MerchantRequest,
  PageMerchantView,
} from '../models/index';
import {
    MerchantFromJSON,
    MerchantToJSON,
    MerchantRequestFromJSON,
    MerchantRequestToJSON,
    PageMerchantViewFromJSON,
    PageMerchantViewToJSON,
} from '../models/index';

export interface CreateMerchantRequest {
    merchantRequest: MerchantRequest;
}

export interface DeleteMerchantRequest {
    id: number;
}

export interface GetMerchantRequest {
    id: number;
}

export interface ListMerchantsRequest {
    cursor?: string;
    limit?: number;
    deleted?: boolean;
}

export interface UpdateMerchantRequest {
    id: number;
    merchantRequest: MerchantRequest;
}

/**
 * 
 */
export class MerchantsApi extends runtime.BaseAPI {

    /**
     * Create a Merchant
     * Create
     */
    async createMerchantRaw(requestParameters: CreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Merchant>> {
        if (requestParameters['merchantRequest'] == null) {
            throw new runtime.RequiredError(
                'merchantRequest',
                'Required parameter "merchantRequest" was null or undefined when calling createMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantRequestToJSON(requestParameters['merchantRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantFromJSON(jsonValue));
    }

    /**
     * Create a Merchant
     * Create
     */
    async createMerchant(requestParameters: CreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Merchant> {
        const response = await this.createMerchantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Merchant by its `id`.
     * Delete by id
     */
    async deleteMerchantRaw(requestParameters: DeleteMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Merchant by its `id`.
     * Delete by id
     */
    async deleteMerchant(requestParameters: DeleteMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMerchantRaw(requestParameters, initOverrides);
    }

    /**
     * Get a Merchant by its `id`.
     * Get by id
     */
    async getMerchantRaw(requestParameters: GetMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Merchant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantFromJSON(jsonValue));
    }

    /**
     * Get a Merchant by its `id`.
     * Get by id
     */
    async getMerchant(requestParameters: GetMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Merchant> {
        const response = await this.getMerchantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the Merchants, optionally filtering by the `deleted` flag
     * List
     */
    async listMerchantsRaw(requestParameters: ListMerchantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageMerchantView>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageMerchantViewFromJSON(jsonValue));
    }

    /**
     * List the Merchants, optionally filtering by the `deleted` flag
     * List
     */
    async listMerchants(requestParameters: ListMerchantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageMerchantView> {
        const response = await this.listMerchantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a Merchant
     * Update
     */
    async updateMerchantRaw(requestParameters: UpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Merchant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateMerchant().'
            );
        }

        if (requestParameters['merchantRequest'] == null) {
            throw new runtime.RequiredError(
                'merchantRequest',
                'Required parameter "merchantRequest" was null or undefined when calling updateMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantRequestToJSON(requestParameters['merchantRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantFromJSON(jsonValue));
    }

    /**
     * Update a Merchant
     * Update
     */
    async updateMerchant(requestParameters: UpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Merchant> {
        const response = await this.updateMerchantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
