/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The Anchor Text request.
 * @export
 * @interface AnchorText
 */
export interface AnchorText {
    /**
     * 
     * @type {string}
     * @memberof AnchorText
     */
    readonly actualPromptTemplate?: string;
    /**
     * Whether to enable Anchor Text, by default false.
     * @type {boolean}
     * @memberof AnchorText
     */
    enabled?: boolean;
    /**
     * The maximum anchor text length, by default 15 characters.
     * @type {number}
     * @memberof AnchorText
     */
    maxCharacters?: number;
    /**
     * The model to use.
     * @type {string}
     * @memberof AnchorText
     */
    model?: string;
    /**
     * The prompt template, we provide a default. Liquid template language is supported.
     * @type {string}
     * @memberof AnchorText
     */
    promptTemplate?: string;
}

/**
 * Check if a given object implements the AnchorText interface.
 */
export function instanceOfAnchorText(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AnchorTextFromJSON(json: any): AnchorText {
    return AnchorTextFromJSONTyped(json, false);
}

export function AnchorTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnchorText {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actualPromptTemplate': !exists(json, 'actual_prompt_template') ? undefined : json['actual_prompt_template'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'maxCharacters': !exists(json, 'max_characters') ? undefined : json['max_characters'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'promptTemplate': !exists(json, 'prompt_template') ? undefined : json['prompt_template'],
    };
}

export function AnchorTextToJSON(value?: AnchorText | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enabled': value.enabled,
        'max_characters': value.maxCharacters,
        'model': value.model,
        'prompt_template': value.promptTemplate,
    };
}

