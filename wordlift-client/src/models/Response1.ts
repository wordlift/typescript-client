/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Event } from './Event';
import {
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
} from './Event';

/**
 * 
 * @export
 * @interface Response1
 */
export interface Response1 {
    /**
     * 
     * @type {Array<Event>}
     * @memberof Response1
     */
    items?: Array<Event>;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    self?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    next?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    prev?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    last?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    first?: string;
}

/**
 * Check if a given object implements the Response1 interface.
 */
export function instanceOfResponse1(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function Response1FromJSON(json: any): Response1 {
    return Response1FromJSONTyped(json, false);
}

export function Response1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Response1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(EventFromJSON)),
        'self': !exists(json, 'self') ? undefined : json['self'],
        'next': !exists(json, 'next') ? undefined : json['next'],
        'prev': !exists(json, 'prev') ? undefined : json['prev'],
        'last': !exists(json, 'last') ? undefined : json['last'],
        'first': !exists(json, 'first') ? undefined : json['first'],
    };
}

export function Response1ToJSON(value?: Response1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(EventToJSON)),
        'self': value.self,
        'next': value.next,
        'prev': value.prev,
        'last': value.last,
        'first': value.first,
    };
}

