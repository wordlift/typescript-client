/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface MicrodataToJsonLdUsingPOSTRequest {
    body: string;
    maxLength?: number;
    minLength?: number;
    ratio?: number;
}

/**
 * 
 */
export class SummarizationsApi extends runtime.BaseAPI {

    /**
     * Create
     */
    async microdataToJsonLdUsingPOSTRaw(requestParameters: MicrodataToJsonLdUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling microdataToJsonLdUsingPOST().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['maxLength'] != null) {
            queryParameters['max_length'] = requestParameters['maxLength'];
        }

        if (requestParameters['minLength'] != null) {
            queryParameters['min_length'] = requestParameters['minLength'];
        }

        if (requestParameters['ratio'] != null) {
            queryParameters['ratio'] = requestParameters['ratio'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/summarize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create
     */
    async microdataToJsonLdUsingPOST(requestParameters: MicrodataToJsonLdUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; } | null | undefined > {
        const response = await this.microdataToJsonLdUsingPOSTRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 201:
                return null;
            default:
                return await response.value();
        }
    }

}
