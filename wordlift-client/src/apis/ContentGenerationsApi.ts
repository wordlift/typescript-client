/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentGeneration,
  ContentGenerationRequest,
  PageContentGeneration,
} from '../models';
import {
    ContentGenerationFromJSON,
    ContentGenerationToJSON,
    ContentGenerationRequestFromJSON,
    ContentGenerationRequestToJSON,
    PageContentGenerationFromJSON,
    PageContentGenerationToJSON,
} from '../models';

export interface CreateContentGenerationRequest {
    contentGenerationRequest: ContentGenerationRequest;
}

export interface DeleteContentGenerationRequest {
    id: number;
}

export interface DuplicateContentGenerationRequest {
    fromContentGenerationId: number;
}

export interface GetContentGenerationRequest {
    id: number;
}

export interface ListContentGenerationsRequest {
    cursor?: string;
    limit?: number;
    deleted?: boolean;
}

export interface UpdateContentGenerationRequest {
    id: number;
    contentGenerationRequest: ContentGenerationRequest;
}

/**
 * 
 */
export class ContentGenerationsApi extends runtime.BaseAPI {

    /**
     * Create
     */
    async createContentGenerationRaw(requestParameters: CreateContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentGeneration>> {
        if (requestParameters.contentGenerationRequest === null || requestParameters.contentGenerationRequest === undefined) {
            throw new runtime.RequiredError('contentGenerationRequest','Required parameter requestParameters.contentGenerationRequest was null or undefined when calling createContentGeneration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentGenerationRequestToJSON(requestParameters.contentGenerationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentGenerationFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createContentGeneration(requestParameters: CreateContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentGeneration> {
        const response = await this.createContentGenerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deleteContentGenerationRaw(requestParameters: DeleteContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteContentGeneration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete
     */
    async deleteContentGeneration(requestParameters: DeleteContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContentGenerationRaw(requestParameters, initOverrides);
    }

    /**
     * Duplicate
     */
    async duplicateContentGenerationRaw(requestParameters: DuplicateContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentGeneration>> {
        if (requestParameters.fromContentGenerationId === null || requestParameters.fromContentGenerationId === undefined) {
            throw new runtime.RequiredError('fromContentGenerationId','Required parameter requestParameters.fromContentGenerationId was null or undefined when calling duplicateContentGeneration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{from_content_generation_id}/duplicates`.replace(`{${"from_content_generation_id"}}`, encodeURIComponent(String(requestParameters.fromContentGenerationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentGenerationFromJSON(jsonValue));
    }

    /**
     * Duplicate
     */
    async duplicateContentGeneration(requestParameters: DuplicateContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentGeneration> {
        const response = await this.duplicateContentGenerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get
     */
    async getContentGenerationRaw(requestParameters: GetContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentGeneration>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getContentGeneration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentGenerationFromJSON(jsonValue));
    }

    /**
     * Get
     */
    async getContentGeneration(requestParameters: GetContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentGeneration> {
        const response = await this.getContentGenerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List
     */
    async listContentGenerationsRaw(requestParameters: ListContentGenerationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageContentGeneration>> {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.deleted !== undefined) {
            queryParameters['deleted'] = requestParameters.deleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageContentGenerationFromJSON(jsonValue));
    }

    /**
     * List
     */
    async listContentGenerations(requestParameters: ListContentGenerationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageContentGeneration> {
        const response = await this.listContentGenerationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updateContentGenerationRaw(requestParameters: UpdateContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentGeneration>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateContentGeneration.');
        }

        if (requestParameters.contentGenerationRequest === null || requestParameters.contentGenerationRequest === undefined) {
            throw new runtime.RequiredError('contentGenerationRequest','Required parameter requestParameters.contentGenerationRequest was null or undefined when calling updateContentGeneration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContentGenerationRequestToJSON(requestParameters.contentGenerationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentGenerationFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async updateContentGeneration(requestParameters: UpdateContentGenerationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentGeneration> {
        const response = await this.updateContentGenerationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
