/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  PageActiveAccount,
  UpdateAccountRequest,
} from '../models';
import {
    AccountFromJSON,
    AccountToJSON,
    PageActiveAccountFromJSON,
    PageActiveAccountToJSON,
    UpdateAccountRequestFromJSON,
    UpdateAccountRequestToJSON,
} from '../models';

export interface GetAccountRequest {
    id: number;
}

export interface ListAccountsRequest {
    cursor?: string;
    limit?: number;
    canContentGeneration?: boolean;
    includeEntityCount?: boolean;
    includeAllAccounts?: boolean;
    includeSubscription?: boolean;
    url?: string;
    ngDatasetId?: string;
}

export interface UpdateAccountOperationRequest {
    id: number;
    updateAccountRequest: UpdateAccountRequest;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Get the account
     * Get an account.
     */
    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Get the account
     * Get an account.
     */
    async getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the accounts
     * List
     */
    async listAccountsRaw(requestParameters: ListAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageActiveAccount>> {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.canContentGeneration !== undefined) {
            queryParameters['can_content_generation'] = requestParameters.canContentGeneration;
        }

        if (requestParameters.includeEntityCount !== undefined) {
            queryParameters['include_entity_count'] = requestParameters.includeEntityCount;
        }

        if (requestParameters.includeAllAccounts !== undefined) {
            queryParameters['include_all_accounts'] = requestParameters.includeAllAccounts;
        }

        if (requestParameters.includeSubscription !== undefined) {
            queryParameters['include_subscription'] = requestParameters.includeSubscription;
        }

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        if (requestParameters.ngDatasetId !== undefined) {
            queryParameters['ng_dataset_id'] = requestParameters.ngDatasetId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageActiveAccountFromJSON(jsonValue));
    }

    /**
     * List the accounts
     * List
     */
    async listAccounts(requestParameters: ListAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageActiveAccount> {
        const response = await this.listAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the account
     * Update an account.
     */
    async updateAccountRaw(requestParameters: UpdateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAccount.');
        }

        if (requestParameters.updateAccountRequest === null || requestParameters.updateAccountRequest === undefined) {
            throw new runtime.RequiredError('updateAccountRequest','Required parameter requestParameters.updateAccountRequest was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountRequestToJSON(requestParameters.updateAccountRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Update the account
     * Update an account.
     */
    async updateAccount(requestParameters: UpdateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
