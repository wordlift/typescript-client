/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmbeddingRequest } from './EmbeddingRequest';
import {
    EmbeddingRequestFromJSON,
    EmbeddingRequestFromJSONTyped,
    EmbeddingRequestToJSON,
} from './EmbeddingRequest';

/**
 * The Sitemap Import request
 * @export
 * @interface SitemapImportRequest
 */
export interface SitemapImportRequest {
    /**
     * 
     * @type {EmbeddingRequest}
     * @memberof SitemapImportRequest
     */
    embedding?: EmbeddingRequest;
    /**
     * The entity id generator, by default uses the web page path.
     * @type {string}
     * @memberof SitemapImportRequest
     */
    idGenerator?: SitemapImportRequestIdGeneratorEnum;
    /**
     * The type of the generated entities, by default `http://schema.org/WebPage`.
     * @type {Set<string>}
     * @memberof SitemapImportRequest
     */
    outputTypes?: Set<string>;
    /**
     * Whether to overwrite existing entities.
     * @type {boolean}
     * @memberof SitemapImportRequest
     */
    overwrite?: boolean;
    /**
     * The sitemap URL
     * @type {string}
     * @memberof SitemapImportRequest
     */
    sitemapUrl?: string;
    /**
     * A regex filter to apply to discovered URLs, it only applies to URLs in sitemaps.
     * @type {string}
     * @memberof SitemapImportRequest
     */
    sitemapUrlRegex?: string;
    /**
     * The URLs
     * @type {Set<string>}
     * @memberof SitemapImportRequest
     */
    urls?: Set<string>;
}


/**
 * @export
 */
export const SitemapImportRequestIdGeneratorEnum = {
    Default: 'default',
    HeadlineWithUrlHash: 'headline-with-url-hash'
} as const;
export type SitemapImportRequestIdGeneratorEnum = typeof SitemapImportRequestIdGeneratorEnum[keyof typeof SitemapImportRequestIdGeneratorEnum];


/**
 * Check if a given object implements the SitemapImportRequest interface.
 */
export function instanceOfSitemapImportRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SitemapImportRequestFromJSON(json: any): SitemapImportRequest {
    return SitemapImportRequestFromJSONTyped(json, false);
}

export function SitemapImportRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SitemapImportRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'embedding': !exists(json, 'embedding') ? undefined : EmbeddingRequestFromJSON(json['embedding']),
        'idGenerator': !exists(json, 'id_generator') ? undefined : json['id_generator'],
        'outputTypes': !exists(json, 'output_types') ? undefined : json['output_types'],
        'overwrite': !exists(json, 'overwrite') ? undefined : json['overwrite'],
        'sitemapUrl': !exists(json, 'sitemap_url') ? undefined : json['sitemap_url'],
        'sitemapUrlRegex': !exists(json, 'sitemap_url_regex') ? undefined : json['sitemap_url_regex'],
        'urls': !exists(json, 'urls') ? undefined : json['urls'],
    };
}

export function SitemapImportRequestToJSON(value?: SitemapImportRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'embedding': EmbeddingRequestToJSON(value.embedding),
        'id_generator': value.idGenerator,
        'output_types': value.outputTypes === undefined ? undefined : Array.from(value.outputTypes as Set<any>),
        'overwrite': value.overwrite,
        'sitemap_url': value.sitemapUrl,
        'sitemap_url_regex': value.sitemapUrlRegex,
        'urls': value.urls === undefined ? undefined : Array.from(value.urls as Set<any>),
    };
}

