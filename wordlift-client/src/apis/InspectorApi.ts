/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InspectResponse,
} from '../models/index';
import {
    InspectResponseFromJSON,
    InspectResponseToJSON,
} from '../models/index';

export interface Get3Request {
    u: string;
    f: Get3FEnum;
    classes?: Array<string>;
}

/**
 * 
 */
export class InspectorApi extends runtime.BaseAPI {

    /**
     * Inspect a URL to perform a variety of tasks defined by the list of applied filters.
     * Inspect
     */
    async get3Raw(requestParameters: Get3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InspectResponse>> {
        if (requestParameters['u'] == null) {
            throw new runtime.RequiredError(
                'u',
                'Required parameter "u" was null or undefined when calling get3().'
            );
        }

        if (requestParameters['f'] == null) {
            throw new runtime.RequiredError(
                'f',
                'Required parameter "f" was null or undefined when calling get3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['u'] != null) {
            queryParameters['u'] = requestParameters['u'];
        }

        if (requestParameters['f'] != null) {
            queryParameters['f'] = requestParameters['f'];
        }

        if (requestParameters['classes'] != null) {
            queryParameters['classes'] = requestParameters['classes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/inspect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectResponseFromJSON(jsonValue));
    }

    /**
     * Inspect a URL to perform a variety of tasks defined by the list of applied filters.
     * Inspect
     */
    async get3(requestParameters: Get3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InspectResponse> {
        const response = await this.get3Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Get3FEnum = {
    Validator: 'validator',
    ContentAnalysis: 'content-analysis',
    MockLanguageDetection: 'mock-language-detection',
    BrowserResponse: 'browser-response',
    JenaGraph: 'jena-graph',
    Links: 'links',
    BrowserResponse2: 'browser-response',
    LinguaLanguageDetection: 'lingua-language-detection',
    LanguageDetection: 'language-detection',
    RedlinkContentAnalysis: 'redlink-content-analysis',
    Summarize: 'summarize',
    Text: 'text',
    Validator2: 'validator',
    Xmltei: 'xmltei',
    Classify: 'classify'
} as const;
export type Get3FEnum = typeof Get3FEnum[keyof typeof Get3FEnum];
