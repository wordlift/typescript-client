/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Event } from './Event';
import {
    EventFromJSON,
    EventFromJSONTyped,
    EventToJSON,
    EventToJSONTyped,
} from './Event';

/**
 * 
 * @export
 * @interface Response1
 */
export interface Response1 {
    /**
     * 
     * @type {Array<Event>}
     * @memberof Response1
     */
    items?: Array<Event>;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    self?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    next?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    prev?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    last?: string;
    /**
     * 
     * @type {string}
     * @memberof Response1
     */
    first?: string;
}

/**
 * Check if a given object implements the Response1 interface.
 */
export function instanceOfResponse1(value: object): value is Response1 {
    return true;
}

export function Response1FromJSON(json: any): Response1 {
    return Response1FromJSONTyped(json, false);
}

export function Response1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Response1 {
    if (json == null) {
        return json;
    }
    return {
        
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(EventFromJSON)),
        'self': json['self'] == null ? undefined : json['self'],
        'next': json['next'] == null ? undefined : json['next'],
        'prev': json['prev'] == null ? undefined : json['prev'],
        'last': json['last'] == null ? undefined : json['last'],
        'first': json['first'] == null ? undefined : json['first'],
    };
}

export function Response1ToJSON(json: any): Response1 {
    return Response1ToJSONTyped(json, false);
}

export function Response1ToJSONTyped(value?: Response1 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(EventToJSON)),
        'self': value['self'],
        'next': value['next'],
        'prev': value['prev'],
        'last': value['last'],
        'first': value['first'],
    };
}

