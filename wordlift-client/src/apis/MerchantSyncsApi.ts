/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MerchantSync,
  PageMerchantSync,
  ProblemDetail,
} from '../models/index';
import {
    MerchantSyncFromJSON,
    MerchantSyncToJSON,
    PageMerchantSyncFromJSON,
    PageMerchantSyncToJSON,
    ProblemDetailFromJSON,
    ProblemDetailToJSON,
} from '../models/index';

export interface CreateSyncRequest {
    merchantId: number;
}

export interface GetMerchantSyncRequest {
    merchantId: number;
    id: number;
}

export interface ListMerchantSyncsRequest {
    merchantId: number;
    cursor?: string;
    limit?: number;
    sort?: string;
}

/**
 * 
 */
export class MerchantSyncsApi extends runtime.BaseAPI {

    /**
     * Start
     */
    async createSyncRaw(requestParameters: CreateSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantSync>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling createSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants/{merchantId}/syncs`.replace(`{${"merchantId"}}`, encodeURIComponent(String(requestParameters['merchantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantSyncFromJSON(jsonValue));
    }

    /**
     * Start
     */
    async createSync(requestParameters: CreateSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantSync> {
        const response = await this.createSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get by id
     */
    async getMerchantSyncRaw(requestParameters: GetMerchantSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MerchantSync>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling getMerchantSync().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMerchantSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants/{merchantId}/syncs/{id}`.replace(`{${"merchantId"}}`, encodeURIComponent(String(requestParameters['merchantId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerchantSyncFromJSON(jsonValue));
    }

    /**
     * Get by id
     */
    async getMerchantSync(requestParameters: GetMerchantSyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MerchantSync> {
        const response = await this.getMerchantSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the Merchants Syncs
     * List
     */
    async listMerchantSyncsRaw(requestParameters: ListMerchantSyncsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageMerchantSync>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling listMerchantSyncs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merchants/{merchantId}/syncs`.replace(`{${"merchantId"}}`, encodeURIComponent(String(requestParameters['merchantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageMerchantSyncFromJSON(jsonValue));
    }

    /**
     * List the Merchants Syncs
     * List
     */
    async listMerchantSyncs(requestParameters: ListMerchantSyncsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageMerchantSync> {
        const response = await this.listMerchantSyncsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
