/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A Merchant project.
 * @export
 * @interface Merchant
 */
export interface Merchant {
    /**
     * The Google merchant access token
     * @type {string}
     * @memberof Merchant
     */
    accessToken: string;
    /**
     * The account id
     * @type {number}
     * @memberof Merchant
     */
    readonly accountId?: number;
    /**
     * Whether the Merchant data will be synchronized automatically
     * @type {boolean}
     * @memberof Merchant
     */
    automaticSynchronization?: boolean;
    /**
     * The create date-time
     * @type {Date}
     * @memberof Merchant
     */
    readonly createdAt?: Date;
    /**
     * Custom seller entity - if applicable.
     * @type {string}
     * @memberof Merchant
     */
    customSeller?: string;
    /**
     * The custom domain (for example data.example.org)
     * @type {string}
     * @memberof Merchant
     * @deprecated
     */
    datasetDomain?: string;
    /**
     * The dataset path (for example /data)
     * @type {string}
     * @memberof Merchant
     * @deprecated
     */
    datasetName?: string;
    /**
     * Default Products filter action to apply during sync process.
     * @type {string}
     * @memberof Merchant
     */
    defaultProductsFilterAction: MerchantDefaultProductsFilterActionEnum;
    /**
     * True if the merchant has been deleted
     * @type {boolean}
     * @memberof Merchant
     */
    deleted: boolean;
    /**
     * The delete date-time
     * @type {Date}
     * @memberof Merchant
     */
    readonly deletedAt?: Date;
    /**
     * The Google Merchant id
     * @type {number}
     * @memberof Merchant
     */
    googleMerchantId: number;
    /**
     * The unique id
     * @type {number}
     * @memberof Merchant
     */
    readonly id?: number;
    /**
     * Whether to ignore the `brand` property during validation
     * @type {boolean}
     * @memberof Merchant
     */
    ignoreBrand?: boolean;
    /**
     * Whether to ignore the `image` property during validation
     * @type {boolean}
     * @memberof Merchant
     */
    ignoreImage?: boolean;
    /**
     * The last modified date-time
     * @type {Date}
     * @memberof Merchant
     */
    readonly modifiedAt?: Date;
    /**
     * The publisher name (shows in schema publisher)
     * @type {string}
     * @memberof Merchant
     */
    publisherName: string;
    /**
     * The Google merchant refresh token
     * @type {string}
     * @memberof Merchant
     */
    refreshToken: string;
    /**
     * The website URL
     * @type {string}
     * @memberof Merchant
     */
    url?: string;
    /**
     * Which strategy to use to write the url schema.
     * @type {string}
     * @memberof Merchant
     */
    urlStrategy?: MerchantUrlStrategyEnum;
    /**
     * How to write the merchant data to the graph, if unsure, do not set anything (by default `wordpressMerchantWriter`).
     * @type {string}
     * @memberof Merchant
     */
    writerService?: string;
}


/**
 * @export
 */
export const MerchantDefaultProductsFilterActionEnum = {
    Process: 'PROCESS',
    Ignore: 'IGNORE'
} as const;
export type MerchantDefaultProductsFilterActionEnum = typeof MerchantDefaultProductsFilterActionEnum[keyof typeof MerchantDefaultProductsFilterActionEnum];

/**
 * @export
 */
export const MerchantUrlStrategyEnum = {
    CanonicalLinkAndLink: 'canonicalLinkAndLink',
    CanonicalLinkOtherwiseLink: 'canonicalLinkOtherwiseLink'
} as const;
export type MerchantUrlStrategyEnum = typeof MerchantUrlStrategyEnum[keyof typeof MerchantUrlStrategyEnum];


/**
 * Check if a given object implements the Merchant interface.
 */
export function instanceOfMerchant(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "defaultProductsFilterAction" in value;
    isInstance = isInstance && "deleted" in value;
    isInstance = isInstance && "googleMerchantId" in value;
    isInstance = isInstance && "publisherName" in value;
    isInstance = isInstance && "refreshToken" in value;

    return isInstance;
}

export function MerchantFromJSON(json: any): Merchant {
    return MerchantFromJSONTyped(json, false);
}

export function MerchantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Merchant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'accountId': !exists(json, 'account_id') ? undefined : json['account_id'],
        'automaticSynchronization': !exists(json, 'automatic_synchronization') ? undefined : json['automatic_synchronization'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'customSeller': !exists(json, 'custom_seller') ? undefined : json['custom_seller'],
        'datasetDomain': !exists(json, 'dataset_domain') ? undefined : json['dataset_domain'],
        'datasetName': !exists(json, 'dataset_name') ? undefined : json['dataset_name'],
        'defaultProductsFilterAction': json['default_products_filter_action'],
        'deleted': json['deleted'],
        'deletedAt': !exists(json, 'deleted_at') ? undefined : (new Date(json['deleted_at'])),
        'googleMerchantId': json['google_merchant_id'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ignoreBrand': !exists(json, 'ignore_brand') ? undefined : json['ignore_brand'],
        'ignoreImage': !exists(json, 'ignore_image') ? undefined : json['ignore_image'],
        'modifiedAt': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'publisherName': json['publisher_name'],
        'refreshToken': json['refresh_token'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'urlStrategy': !exists(json, 'url_strategy') ? undefined : json['url_strategy'],
        'writerService': !exists(json, 'writer_service') ? undefined : json['writer_service'],
    };
}

export function MerchantToJSON(value?: Merchant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_token': value.accessToken,
        'automatic_synchronization': value.automaticSynchronization,
        'custom_seller': value.customSeller,
        'dataset_domain': value.datasetDomain,
        'dataset_name': value.datasetName,
        'default_products_filter_action': value.defaultProductsFilterAction,
        'deleted': value.deleted,
        'google_merchant_id': value.googleMerchantId,
        'ignore_brand': value.ignoreBrand,
        'ignore_image': value.ignoreImage,
        'publisher_name': value.publisherName,
        'refresh_token': value.refreshToken,
        'url': value.url,
        'url_strategy': value.urlStrategy,
        'writer_service': value.writerService,
    };
}

