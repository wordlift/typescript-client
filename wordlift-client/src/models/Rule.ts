/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LevelEnum } from './LevelEnum';
import {
    LevelEnumFromJSON,
    LevelEnumFromJSONTyped,
    LevelEnumToJSON,
} from './LevelEnum';
import type { ProjectType } from './ProjectType';
import {
    ProjectTypeFromJSON,
    ProjectTypeFromJSONTyped,
    ProjectTypeToJSON,
} from './ProjectType';
import type { Scope } from './Scope';
import {
    ScopeFromJSON,
    ScopeFromJSONTyped,
    ScopeToJSON,
} from './Scope';
import type { ValidationFix } from './ValidationFix';
import {
    ValidationFixFromJSON,
    ValidationFixFromJSONTyped,
    ValidationFixToJSON,
} from './ValidationFix';
import type { WhatOperandLhs } from './WhatOperandLhs';
import {
    WhatOperandLhsFromJSON,
    WhatOperandLhsFromJSONTyped,
    WhatOperandLhsToJSON,
} from './WhatOperandLhs';
import type { WhatOperator } from './WhatOperator';
import {
    WhatOperatorFromJSON,
    WhatOperatorFromJSONTyped,
    WhatOperatorToJSON,
} from './WhatOperator';
import type { WhenOperator } from './WhenOperator';
import {
    WhenOperatorFromJSON,
    WhenOperatorFromJSONTyped,
    WhenOperatorToJSON,
} from './WhenOperator';

/**
 * 
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * The create date-time.
     * @type {Date}
     * @memberof Rule
     */
    readonly createdAt?: Date;
    /**
     * Description for the rule
     * @type {string}
     * @memberof Rule
     */
    description?: string;
    /**
     * The list of fixes to apply when the rule validation fails.
     * @type {Array<ValidationFix>}
     * @memberof Rule
     */
    fixes?: Array<ValidationFix>;
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Rule
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {LevelEnum}
     * @memberof Rule
     */
    level: LevelEnum;
    /**
     * The last modified date-time.
     * @type {Date}
     * @memberof Rule
     */
    readonly modifiedAt?: Date;
    /**
     * The rule name.
     * @type {string}
     * @memberof Rule
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Rule
     */
    projectId?: number;
    /**
     * 
     * @type {ProjectType}
     * @memberof Rule
     */
    projectType?: ProjectType;
    /**
     * 
     * @type {Scope}
     * @memberof Rule
     */
    scope: Scope;
    /**
     * The rule type, one of `field`, `word` or `code`. By default `field`.
     * @type {string}
     * @memberof Rule
     */
    type: string;
    /**
     * 
     * @type {WhatOperandLhs}
     * @memberof Rule
     */
    whatOperandLhs: WhatOperandLhs;
    /**
     * The right hand side operand for what condition.
     * @type {string}
     * @memberof Rule
     */
    whatOperandRhs: string;
    /**
     * 
     * @type {WhatOperator}
     * @memberof Rule
     */
    whatOperator: WhatOperator;
    /**
     * The left hand side  operand for when condition.
     * @type {string}
     * @memberof Rule
     */
    whenOperandLhs: string;
    /**
     * The right hand side operand for when condition.
     * @type {string}
     * @memberof Rule
     */
    whenOperandRhs: string;
    /**
     * 
     * @type {WhenOperator}
     * @memberof Rule
     */
    whenOperator: WhenOperator;
}

/**
 * Check if a given object implements the Rule interface.
 */
export function instanceOfRule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "level" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "scope" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "whatOperandLhs" in value;
    isInstance = isInstance && "whatOperandRhs" in value;
    isInstance = isInstance && "whatOperator" in value;
    isInstance = isInstance && "whenOperandLhs" in value;
    isInstance = isInstance && "whenOperandRhs" in value;
    isInstance = isInstance && "whenOperator" in value;

    return isInstance;
}

export function RuleFromJSON(json: any): Rule {
    return RuleFromJSONTyped(json, false);
}

export function RuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Rule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'fixes': !exists(json, 'fixes') ? undefined : ((json['fixes'] as Array<any>).map(ValidationFixFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isEnabled': !exists(json, 'is_enabled') ? undefined : json['is_enabled'],
        'level': LevelEnumFromJSON(json['level']),
        'modifiedAt': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'name': json['name'],
        'projectId': !exists(json, 'project_id') ? undefined : json['project_id'],
        'projectType': !exists(json, 'project_type') ? undefined : ProjectTypeFromJSON(json['project_type']),
        'scope': ScopeFromJSON(json['scope']),
        'type': json['type'],
        'whatOperandLhs': WhatOperandLhsFromJSON(json['what_operand_lhs']),
        'whatOperandRhs': json['what_operand_rhs'],
        'whatOperator': WhatOperatorFromJSON(json['what_operator']),
        'whenOperandLhs': json['when_operand_lhs'],
        'whenOperandRhs': json['when_operand_rhs'],
        'whenOperator': WhenOperatorFromJSON(json['when_operator']),
    };
}

export function RuleToJSON(value?: Rule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'fixes': value.fixes === undefined ? undefined : ((value.fixes as Array<any>).map(ValidationFixToJSON)),
        'id': value.id,
        'is_enabled': value.isEnabled,
        'level': LevelEnumToJSON(value.level),
        'name': value.name,
        'project_id': value.projectId,
        'project_type': ProjectTypeToJSON(value.projectType),
        'scope': ScopeToJSON(value.scope),
        'type': value.type,
        'what_operand_lhs': WhatOperandLhsToJSON(value.whatOperandLhs),
        'what_operand_rhs': value.whatOperandRhs,
        'what_operator': WhatOperatorToJSON(value.whatOperator),
        'when_operand_lhs': value.whenOperandLhs,
        'when_operand_rhs': value.whenOperandRhs,
        'when_operator': WhenOperatorToJSON(value.whenOperator),
    };
}

