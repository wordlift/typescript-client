/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LongtailResponse,
  RankEntities,
} from '../models';
import {
    LongtailResponseFromJSON,
    LongtailResponseToJSON,
    RankEntitiesFromJSON,
    RankEntitiesToJSON,
} from '../models';

export interface Get2Request {
    q: string;
    ln: string;
    lc: string;
    sd: string;
    sc?: Get2ScEnum;
    d?: string;
}

export interface Get3Request {
    q: string;
    ln: string;
    lc: string;
    sd: string;
    hk: string;
    sc?: Get3ScEnum;
    d?: string;
}

export interface GetV2Request {
    q: string;
    ln: string;
    lc: string;
    sd: string;
    sc?: GetV2ScEnum;
    d?: string;
}

/**
 * 
 */
export class LongTailsApi extends runtime.BaseAPI {

    /**
     * Query for long tail opportunities and receive entities.
     * Get entities
     */
    async get2Raw(requestParameters: Get2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LongtailResponse>> {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling get2.');
        }

        if (requestParameters.ln === null || requestParameters.ln === undefined) {
            throw new runtime.RequiredError('ln','Required parameter requestParameters.ln was null or undefined when calling get2.');
        }

        if (requestParameters.lc === null || requestParameters.lc === undefined) {
            throw new runtime.RequiredError('lc','Required parameter requestParameters.lc was null or undefined when calling get2.');
        }

        if (requestParameters.sd === null || requestParameters.sd === undefined) {
            throw new runtime.RequiredError('sd','Required parameter requestParameters.sd was null or undefined when calling get2.');
        }

        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.ln !== undefined) {
            queryParameters['ln'] = requestParameters.ln;
        }

        if (requestParameters.lc !== undefined) {
            queryParameters['lc'] = requestParameters.lc;
        }

        if (requestParameters.sd !== undefined) {
            queryParameters['sd'] = requestParameters.sd;
        }

        if (requestParameters.sc !== undefined) {
            queryParameters['sc'] = requestParameters.sc;
        }

        if (requestParameters.d !== undefined) {
            queryParameters['d'] = requestParameters.d;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/longtail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LongtailResponseFromJSON(jsonValue));
    }

    /**
     * Query for long tail opportunities and receive entities.
     * Get entities
     */
    async get2(requestParameters: Get2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LongtailResponse> {
        const response = await this.get2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query for long tail opportunities and receive entities along with their position in SERP.
     * Get entities by rank (async)
     */
    async get3Raw(requestParameters: Get3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling get3.');
        }

        if (requestParameters.ln === null || requestParameters.ln === undefined) {
            throw new runtime.RequiredError('ln','Required parameter requestParameters.ln was null or undefined when calling get3.');
        }

        if (requestParameters.lc === null || requestParameters.lc === undefined) {
            throw new runtime.RequiredError('lc','Required parameter requestParameters.lc was null or undefined when calling get3.');
        }

        if (requestParameters.sd === null || requestParameters.sd === undefined) {
            throw new runtime.RequiredError('sd','Required parameter requestParameters.sd was null or undefined when calling get3.');
        }

        if (requestParameters.hk === null || requestParameters.hk === undefined) {
            throw new runtime.RequiredError('hk','Required parameter requestParameters.hk was null or undefined when calling get3.');
        }

        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.ln !== undefined) {
            queryParameters['ln'] = requestParameters.ln;
        }

        if (requestParameters.lc !== undefined) {
            queryParameters['lc'] = requestParameters.lc;
        }

        if (requestParameters.sd !== undefined) {
            queryParameters['sd'] = requestParameters.sd;
        }

        if (requestParameters.sc !== undefined) {
            queryParameters['sc'] = requestParameters.sc;
        }

        if (requestParameters.hk !== undefined) {
            queryParameters['hk'] = requestParameters.hk;
        }

        if (requestParameters.d !== undefined) {
            queryParameters['d'] = requestParameters.d;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/longtail/hook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Query for long tail opportunities and receive entities along with their position in SERP.
     * Get entities by rank (async)
     */
    async get3(requestParameters: Get3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.get3Raw(requestParameters, initOverrides);
    }

    /**
     * Query for long tail opportunities and receive entities along with their position in SERP.
     * Get entities by rank
     */
    async getV2Raw(requestParameters: GetV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RankEntities>>> {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling getV2.');
        }

        if (requestParameters.ln === null || requestParameters.ln === undefined) {
            throw new runtime.RequiredError('ln','Required parameter requestParameters.ln was null or undefined when calling getV2.');
        }

        if (requestParameters.lc === null || requestParameters.lc === undefined) {
            throw new runtime.RequiredError('lc','Required parameter requestParameters.lc was null or undefined when calling getV2.');
        }

        if (requestParameters.sd === null || requestParameters.sd === undefined) {
            throw new runtime.RequiredError('sd','Required parameter requestParameters.sd was null or undefined when calling getV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.ln !== undefined) {
            queryParameters['ln'] = requestParameters.ln;
        }

        if (requestParameters.lc !== undefined) {
            queryParameters['lc'] = requestParameters.lc;
        }

        if (requestParameters.sd !== undefined) {
            queryParameters['sd'] = requestParameters.sd;
        }

        if (requestParameters.sc !== undefined) {
            queryParameters['sc'] = requestParameters.sc;
        }

        if (requestParameters.d !== undefined) {
            queryParameters['d'] = requestParameters.d;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/longtail/v2`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RankEntitiesFromJSON));
    }

    /**
     * Query for long tail opportunities and receive entities along with their position in SERP.
     * Get entities by rank
     */
    async getV2(requestParameters: GetV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RankEntities>> {
        const response = await this.getV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Get2ScEnum = {
    All: 'all',
    Local: 'local',
    Network: 'network'
} as const;
export type Get2ScEnum = typeof Get2ScEnum[keyof typeof Get2ScEnum];
/**
 * @export
 */
export const Get3ScEnum = {
    All: 'all',
    Local: 'local',
    Network: 'network'
} as const;
export type Get3ScEnum = typeof Get3ScEnum[keyof typeof Get3ScEnum];
/**
 * @export
 */
export const GetV2ScEnum = {
    All: 'all',
    Local: 'local',
    Network: 'network'
} as const;
export type GetV2ScEnum = typeof GetV2ScEnum[keyof typeof GetV2ScEnum];
