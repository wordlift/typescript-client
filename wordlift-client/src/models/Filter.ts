/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FilterValue } from './FilterValue';
import {
    FilterValueFromJSON,
    FilterValueFromJSONTyped,
    FilterValueToJSON,
} from './FilterValue';

/**
 * A query request filter.
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * Operational filters such as AND or OR.
     * @type {Array<Filter>}
     * @memberof Filter
     */
    filters?: Array<Filter>;
    /**
     * The filter key. Key is required for the filters [EQ, NE, GT, LT, GTE, LTE, IN, NIN]
     * @type {string}
     * @memberof Filter
     */
    key?: string;
    /**
     * A query request filter operator.
     * @type {string}
     * @memberof Filter
     */
    operator: FilterOperatorEnum;
    /**
     * 
     * @type {FilterValue}
     * @memberof Filter
     */
    value?: FilterValue;
    /**
     * The filter value as a date, if provided will be preferred over the `value` field.
     * @type {Date}
     * @memberof Filter
     */
    valueDate?: Date;
}


/**
 * @export
 */
export const FilterOperatorEnum = {
    Eq: 'EQ',
    Gt: 'GT',
    Lt: 'LT',
    Ne: 'NE',
    Gte: 'GTE',
    Lte: 'LTE',
    In: 'IN',
    Nin: 'NIN',
    And: 'AND',
    Or: 'OR'
} as const;
export type FilterOperatorEnum = typeof FilterOperatorEnum[keyof typeof FilterOperatorEnum];


/**
 * Check if a given object implements the Filter interface.
 */
export function instanceOfFilter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "operator" in value;

    return isInstance;
}

export function FilterFromJSON(json: any): Filter {
    return FilterFromJSONTyped(json, false);
}

export function FilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Filter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'filters': !exists(json, 'filters') ? undefined : ((json['filters'] as Array<any>).map(FilterFromJSON)),
        'key': !exists(json, 'key') ? undefined : json['key'],
        'operator': json['operator'],
        'value': !exists(json, 'value') ? undefined : FilterValueFromJSON(json['value']),
        'valueDate': !exists(json, 'value_date') ? undefined : (new Date(json['value_date'])),
    };
}

export function FilterToJSON(value?: Filter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'filters': value.filters === undefined ? undefined : ((value.filters as Array<any>).map(FilterToJSON)),
        'key': value.key,
        'operator': value.operator,
        'value': FilterValueToJSON(value.value),
        'value_date': value.valueDate === undefined ? undefined : (value.valueDate.toISOString()),
    };
}

