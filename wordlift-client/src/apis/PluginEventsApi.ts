/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Event,
  Request1,
  Response1,
} from '../models/index';
import {
    EventFromJSON,
    EventToJSON,
    Request1FromJSON,
    Request1ToJSON,
    Response1FromJSON,
    Response1ToJSON,
} from '../models/index';

export interface CreateEventRequest {
    request1: Request1;
}

export interface ListEventsRequest {
    url?: Set<string>;
    dateGreaterThan?: Date;
    dateLessThan?: Date;
    cursor?: string;
    limit?: number;
}

/**
 * 
 */
export class PluginEventsApi extends runtime.BaseAPI {

    /**
     * Create an event
     * Create
     */
    async createEventRaw(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['request1'] == null) {
            throw new runtime.RequiredError(
                'request1',
                'Required parameter "request1" was null or undefined when calling createEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/plugin/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Request1ToJSON(requestParameters['request1']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Create an event
     * Create
     */
    async createEvent(requestParameters: CreateEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.createEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the events bound to the authenticated account.
     * List
     */
    async listEventsRaw(requestParameters: ListEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response1>> {
        const queryParameters: any = {};

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['dateGreaterThan'] != null) {
            queryParameters['date_greater_than'] = (requestParameters['dateGreaterThan'] as any).toISOString();
        }

        if (requestParameters['dateLessThan'] != null) {
            queryParameters['date_less_than'] = (requestParameters['dateLessThan'] as any).toISOString();
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/plugin/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Response1FromJSON(jsonValue));
    }

    /**
     * List the events bound to the authenticated account.
     * List
     */
    async listEvents(requestParameters: ListEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response1> {
        const response = await this.listEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
