/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityPatchRequest,
} from '../models';
import {
    EntityPatchRequestFromJSON,
    EntityPatchRequestToJSON,
} from '../models';

export interface CreateEntitiesRequest {
    body: string;
}

export interface CreateOrUpdateEntitiesRequest {
    body: string;
}

export interface DeleteEntitiesRequest {
    id: Set<string>;
    includeChildren?: string;
    includeReferenced?: string;
}

export interface GetEntitiesRequest {
    id: Set<string>;
    includeChildren?: string;
    includeReferenced?: string;
    includePrivate?: string;
}

export interface PatchEntitiesRequest {
    id: string;
    entityPatchRequest: Array<EntityPatchRequest>;
}

/**
 * 
 */
export class EntitiesApi extends runtime.BaseAPI {

    /**
     * Create new entities by automatically generating their id.
     * Create
     */
    async createEntitiesRaw(requestParameters: CreateEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createEntities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/ld+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/entities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create new entities by automatically generating their id.
     * Create
     */
    async createEntities(requestParameters: CreateEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update entities by using the provided ids.
     * Update (or create)
     */
    async createOrUpdateEntitiesRaw(requestParameters: CreateOrUpdateEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrUpdateEntities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/ld+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/entities`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update entities by using the provided ids.
     * Update (or create)
     */
    async createOrUpdateEntities(requestParameters: CreateOrUpdateEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createOrUpdateEntitiesRaw(requestParameters, initOverrides);
    }

    /**
     * Delete entities with the provided ids.
     * Delete
     */
    async deleteEntitiesRaw(requestParameters: DeleteEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEntities.');
        }

        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.includeChildren !== undefined) {
            queryParameters['include_children'] = requestParameters.includeChildren;
        }

        if (requestParameters.includeReferenced !== undefined) {
            queryParameters['include_referenced'] = requestParameters.includeReferenced;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/entities`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete entities with the provided ids.
     * Delete
     */
    async deleteEntities(requestParameters: DeleteEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntitiesRaw(requestParameters, initOverrides);
    }

    /**
     * Get entities with the provided ids.
     * Get
     */
    async getEntitiesRaw(requestParameters: GetEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEntities.');
        }

        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.includeChildren !== undefined) {
            queryParameters['include_children'] = requestParameters.includeChildren;
        }

        if (requestParameters.includeReferenced !== undefined) {
            queryParameters['include_referenced'] = requestParameters.includeReferenced;
        }

        if (requestParameters.includePrivate !== undefined) {
            queryParameters['include_private'] = requestParameters.includePrivate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/entities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get entities with the provided ids.
     * Get
     */
    async getEntities(requestParameters: GetEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch entity
     * Patch Entity
     */
    async patchEntitiesRaw(requestParameters: PatchEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchEntities.');
        }

        if (requestParameters.entityPatchRequest === null || requestParameters.entityPatchRequest === undefined) {
            throw new runtime.RequiredError('entityPatchRequest','Required parameter requestParameters.entityPatchRequest was null or undefined when calling patchEntities.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/entities`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.entityPatchRequest.map(EntityPatchRequestToJSON),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Patch entity
     * Patch Entity
     */
    async patchEntities(requestParameters: PatchEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.patchEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
