/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Properties } from './Properties';
import {
    PropertiesFromJSON,
    PropertiesFromJSONTyped,
    PropertiesToJSON,
    PropertiesToJSONTyped,
} from './Properties';

/**
 * Entity
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * The entity URI.
     * @type {string}
     * @memberof Entity
     */
    entityId?: string;
    /**
     * Confidence score representing the entity match level.
     * @type {number}
     * @memberof Entity
     */
    confidence?: number;
    /**
     * The main schema type for the current entity.
     * @type {string}
     * @memberof Entity
     */
    mainType?: string;
    /**
     * The list of schema types which the entity can be classified to.
     * @type {Array<string>}
     * @memberof Entity
     */
    types?: Array<string>;
    /**
     * The title of the entity.
     * @type {string}
     * @memberof Entity
     */
    label?: string;
    /**
     * The description about the entity.
     * @type {string}
     * @memberof Entity
     */
    description?: string;
    /**
     * The list of entity image URIs.
     * @type {Array<string>}
     * @memberof Entity
     */
    images?: Array<string>;
    /**
     * The list of entity sameas URIs.
     * @type {Array<string>}
     * @memberof Entity
     */
    sameAs?: Array<string>;
    /**
     * 
     * @type {Properties}
     * @memberof Entity
     */
    properties?: Properties;
    /**
     * 
     * @type {Array<string>}
     * @memberof Entity
     */
    synonyms?: Array<string>;
}

/**
 * Check if a given object implements the Entity interface.
 */
export function instanceOfEntity(value: object): value is Entity {
    return true;
}

export function EntityFromJSON(json: any): Entity {
    return EntityFromJSONTyped(json, false);
}

export function EntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entity {
    if (json == null) {
        return json;
    }
    return {
        
        'entityId': json['entityId'] == null ? undefined : json['entityId'],
        'confidence': json['confidence'] == null ? undefined : json['confidence'],
        'mainType': json['mainType'] == null ? undefined : json['mainType'],
        'types': json['types'] == null ? undefined : json['types'],
        'label': json['label'] == null ? undefined : json['label'],
        'description': json['description'] == null ? undefined : json['description'],
        'images': json['images'] == null ? undefined : json['images'],
        'sameAs': json['sameAs'] == null ? undefined : json['sameAs'],
        'properties': json['properties'] == null ? undefined : PropertiesFromJSON(json['properties']),
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
    };
}

export function EntityToJSON(json: any): Entity {
    return EntityToJSONTyped(json, false);
}

export function EntityToJSONTyped(value?: Entity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'entityId': value['entityId'],
        'confidence': value['confidence'],
        'mainType': value['mainType'],
        'types': value['types'],
        'label': value['label'],
        'description': value['description'],
        'images': value['images'],
        'sameAs': value['sameAs'],
        'properties': PropertiesToJSON(value['properties']),
        'synonyms': value['synonyms'],
    };
}

