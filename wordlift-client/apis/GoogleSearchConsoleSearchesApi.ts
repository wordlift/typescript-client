/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageWebsiteSearch,
} from '../models/index';
import {
    PageWebsiteSearchFromJSON,
    PageWebsiteSearchToJSON,
} from '../models/index';

export interface ListWebsiteSearch1Request {
    since: string;
    until: string;
    dimensions: Array<string>;
    cursor?: string;
    dataState?: ListWebsiteSearch1DataStateEnum;
    limit?: number;
}

/**
 * 
 */
export class GoogleSearchConsoleSearchesApi extends runtime.BaseAPI {

    /**
     * List the Website Search performance data
     * List Website Search data
     */
    async listWebsiteSearch1Raw(requestParameters: ListWebsiteSearch1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageWebsiteSearch>> {
        if (requestParameters['since'] == null) {
            throw new runtime.RequiredError(
                'since',
                'Required parameter "since" was null or undefined when calling listWebsiteSearch1().'
            );
        }

        if (requestParameters['until'] == null) {
            throw new runtime.RequiredError(
                'until',
                'Required parameter "until" was null or undefined when calling listWebsiteSearch1().'
            );
        }

        if (requestParameters['dimensions'] == null) {
            throw new runtime.RequiredError(
                'dimensions',
                'Required parameter "dimensions" was null or undefined when calling listWebsiteSearch1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['dimensions'] != null) {
            queryParameters['dimensions'] = requestParameters['dimensions'];
        }

        if (requestParameters['dataState'] != null) {
            queryParameters['data_state'] = requestParameters['dataState'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/accounts/me/google/searches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageWebsiteSearchFromJSON(jsonValue));
    }

    /**
     * List the Website Search performance data
     * List Website Search data
     */
    async listWebsiteSearch1(requestParameters: ListWebsiteSearch1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageWebsiteSearch> {
        const response = await this.listWebsiteSearch1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListWebsiteSearch1DataStateEnum = {
    All: 'all',
    Final: 'final'
} as const;
export type ListWebsiteSearch1DataStateEnum = typeof ListWebsiteSearch1DataStateEnum[keyof typeof ListWebsiteSearch1DataStateEnum];
