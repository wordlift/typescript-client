/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntityPatchRequest
 */
export interface EntityPatchRequest {
    /**
     * The patch operation, example `add`.
     * @type {string}
     * @memberof EntityPatchRequest
     */
    op?: EntityPatchRequestOpEnum;
    /**
     * The property to apply the operation, JSONPath formatted (leading slash) on, e.g. `/https://schema.org/image (note the leading slash).
     * @type {string}
     * @memberof EntityPatchRequest
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityPatchRequest
     */
    value?: string;
}


/**
 * @export
 */
export const EntityPatchRequestOpEnum = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy',
    Test: 'test',
    Add2: 'add',
    Remove2: 'remove',
    Replace2: 'replace'
} as const;
export type EntityPatchRequestOpEnum = typeof EntityPatchRequestOpEnum[keyof typeof EntityPatchRequestOpEnum];


/**
 * Check if a given object implements the EntityPatchRequest interface.
 */
export function instanceOfEntityPatchRequest(value: object): value is EntityPatchRequest {
    return true;
}

export function EntityPatchRequestFromJSON(json: any): EntityPatchRequest {
    return EntityPatchRequestFromJSONTyped(json, false);
}

export function EntityPatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityPatchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'op': json['op'] == null ? undefined : json['op'],
        'path': json['path'] == null ? undefined : json['path'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function EntityPatchRequestToJSON(json: any): EntityPatchRequest {
    return EntityPatchRequestToJSONTyped(json, false);
}

export function EntityPatchRequestToJSONTyped(value?: EntityPatchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'op': value['op'],
        'path': value['path'],
        'value': value['value'],
    };
}

