/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QuestionAndAnswer,
  QuestionAndAnswerRequest,
  SmartContent,
  SmartContentRequest,
  UpdateQuestionAndAnswerRequest,
} from '../models';
import {
    QuestionAndAnswerFromJSON,
    QuestionAndAnswerToJSON,
    QuestionAndAnswerRequestFromJSON,
    QuestionAndAnswerRequestToJSON,
    SmartContentFromJSON,
    SmartContentToJSON,
    SmartContentRequestFromJSON,
    SmartContentRequestToJSON,
    UpdateQuestionAndAnswerRequestFromJSON,
    UpdateQuestionAndAnswerRequestToJSON,
} from '../models';

export interface CreateQuestionAndAnswerRequest {
    questionAndAnswerRequest: QuestionAndAnswerRequest;
}

export interface CreateQuestionsAndAnswersCollectionRequest {
    smartContentRequest: SmartContentRequest;
}

export interface DeleteQuestionAndAnswerRequest {
    id: number;
}

export interface DeleteQuestionsAndAnswersCollectionRequest {
    smartContentId: number;
}

export interface GetQuestionsAndAnswersRequest {
    accountId?: number;
    iri?: string;
    smartContentId?: number;
}

export interface UpdateQuestionAndAnswerOperationRequest {
    id: number;
    updateQuestionAndAnswerRequest: UpdateQuestionAndAnswerRequest;
}

export interface UpdateQuestionsAndAnswersCollectionRequest {
    questionAndAnswerRequest: QuestionAndAnswerRequest;
}

/**
 * 
 */
export class QuestionsAndAnswersApi extends runtime.BaseAPI {

    /**
     * Create
     */
    async createQuestionAndAnswerRaw(requestParameters: CreateQuestionAndAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionAndAnswer>> {
        if (requestParameters.questionAndAnswerRequest === null || requestParameters.questionAndAnswerRequest === undefined) {
            throw new runtime.RequiredError('questionAndAnswerRequest','Required parameter requestParameters.questionAndAnswerRequest was null or undefined when calling createQuestionAndAnswer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/questions-and-answers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionAndAnswerRequestToJSON(requestParameters.questionAndAnswerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionAndAnswerFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createQuestionAndAnswer(requestParameters: CreateQuestionAndAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionAndAnswer> {
        const response = await this.createQuestionAndAnswerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async createQuestionsAndAnswersCollectionRaw(requestParameters: CreateQuestionsAndAnswersCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartContent>> {
        if (requestParameters.smartContentRequest === null || requestParameters.smartContentRequest === undefined) {
            throw new runtime.RequiredError('smartContentRequest','Required parameter requestParameters.smartContentRequest was null or undefined when calling createQuestionsAndAnswersCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/questions-and-answers-collection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SmartContentRequestToJSON(requestParameters.smartContentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartContentFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createQuestionsAndAnswersCollection(requestParameters: CreateQuestionsAndAnswersCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartContent> {
        const response = await this.createQuestionsAndAnswersCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deleteQuestionAndAnswerRaw(requestParameters: DeleteQuestionAndAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteQuestionAndAnswer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/questions-and-answers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete
     */
    async deleteQuestionAndAnswer(requestParameters: DeleteQuestionAndAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuestionAndAnswerRaw(requestParameters, initOverrides);
    }

    /**
     * Delete
     */
    async deleteQuestionsAndAnswersCollectionRaw(requestParameters: DeleteQuestionsAndAnswersCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.smartContentId === null || requestParameters.smartContentId === undefined) {
            throw new runtime.RequiredError('smartContentId','Required parameter requestParameters.smartContentId was null or undefined when calling deleteQuestionsAndAnswersCollection.');
        }

        const queryParameters: any = {};

        if (requestParameters.smartContentId !== undefined) {
            queryParameters['smart_content_id'] = requestParameters.smartContentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/questions-and-answers-collection`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete
     */
    async deleteQuestionsAndAnswersCollection(requestParameters: DeleteQuestionsAndAnswersCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuestionsAndAnswersCollectionRaw(requestParameters, initOverrides);
    }

    /**
     * Get
     */
    async getQuestionsAndAnswersRaw(requestParameters: GetQuestionsAndAnswersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuestionAndAnswer>>> {
        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['account_id'] = requestParameters.accountId;
        }

        if (requestParameters.iri !== undefined) {
            queryParameters['iri'] = requestParameters.iri;
        }

        if (requestParameters.smartContentId !== undefined) {
            queryParameters['smart_content_id'] = requestParameters.smartContentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/questions-and-answers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionAndAnswerFromJSON));
    }

    /**
     * Get
     */
    async getQuestionsAndAnswers(requestParameters: GetQuestionsAndAnswersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuestionAndAnswer>> {
        const response = await this.getQuestionsAndAnswersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updateQuestionAndAnswerRaw(requestParameters: UpdateQuestionAndAnswerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionAndAnswer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateQuestionAndAnswer.');
        }

        if (requestParameters.updateQuestionAndAnswerRequest === null || requestParameters.updateQuestionAndAnswerRequest === undefined) {
            throw new runtime.RequiredError('updateQuestionAndAnswerRequest','Required parameter requestParameters.updateQuestionAndAnswerRequest was null or undefined when calling updateQuestionAndAnswer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/questions-and-answers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateQuestionAndAnswerRequestToJSON(requestParameters.updateQuestionAndAnswerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionAndAnswerFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async updateQuestionAndAnswer(requestParameters: UpdateQuestionAndAnswerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionAndAnswer> {
        const response = await this.updateQuestionAndAnswerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updateQuestionsAndAnswersCollectionRaw(requestParameters: UpdateQuestionsAndAnswersCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuestionAndAnswer>>> {
        if (requestParameters.questionAndAnswerRequest === null || requestParameters.questionAndAnswerRequest === undefined) {
            throw new runtime.RequiredError('questionAndAnswerRequest','Required parameter requestParameters.questionAndAnswerRequest was null or undefined when calling updateQuestionsAndAnswersCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/questions-and-answers-collection`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionAndAnswerRequestToJSON(requestParameters.questionAndAnswerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionAndAnswerFromJSON));
    }

    /**
     * Update
     */
    async updateQuestionsAndAnswersCollection(requestParameters: UpdateQuestionsAndAnswersCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuestionAndAnswer>> {
        const response = await this.updateQuestionsAndAnswersCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
