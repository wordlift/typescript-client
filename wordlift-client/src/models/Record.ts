/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValidationResult } from './ValidationResult';
import {
    ValidationResultFromJSON,
    ValidationResultFromJSONTyped,
    ValidationResultToJSON,
} from './ValidationResult';
import type { WordRepetitionData } from './WordRepetitionData';
import {
    WordRepetitionDataFromJSON,
    WordRepetitionDataFromJSONTyped,
    WordRepetitionDataToJSON,
} from './WordRepetitionData';

/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    completion?: string;
    /**
     * The parent content generation id.
     * @type {number}
     * @memberof Record
     */
    readonly contentGenerationId: number;
    /**
     * The data from knowledge graph after applying the graphql query.
     * @type {object}
     * @memberof Record
     */
    readonly data?: object;
    /**
     * The set of errors found for record.
     * @type {Array<ValidationResult>}
     * @memberof Record
     */
    readonly errors?: Array<ValidationResult>;
    /**
     * This indicates whether the user upvoted the completion.
     * @type {boolean}
     * @memberof Record
     */
    hasUpvote: boolean;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    id?: number;
    /**
     * This indicates whether the completion is accepted by the user.
     * @type {boolean}
     * @memberof Record
     */
    isAccepted: boolean;
    /**
     * The last modified date-time.
     * @type {Date}
     * @memberof Record
     */
    readonly modifiedAt?: Date;
    /**
     * Words in completion that are not in the prompt.
     * @type {Set<string>}
     * @memberof Record
     */
    readonly notInPromptWords?: Set<string>;
    /**
     * The prompt.
     * @type {string}
     * @memberof Record
     */
    prompt: string;
    /**
     * Words in completion which are repeated.
     * @type {{ [key: string]: WordRepetitionData; }}
     * @memberof Record
     */
    readonly repeatedWords?: { [key: string]: WordRepetitionData; };
    /**
     * The status of the record, whether it's accepted, with errors, with warnings or valid.
     * @type {string}
     * @memberof Record
     */
    readonly status?: RecordStatusEnum;
    /**
     * The last validation date-time.
     * @type {Date}
     * @memberof Record
     */
    readonly validatedAt?: Date;
    /**
     * The set of errors found for record.
     * @type {Array<ValidationResult>}
     * @memberof Record
     */
    readonly warnings?: Array<ValidationResult>;
}


/**
 * @export
 */
export const RecordStatusEnum = {
    Accepted: 'accepted',
    Warnings: 'warnings',
    Errors: 'errors',
    Valid: 'valid'
} as const;
export type RecordStatusEnum = typeof RecordStatusEnum[keyof typeof RecordStatusEnum];


/**
 * Check if a given object implements the Record interface.
 */
export function instanceOfRecord(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contentGenerationId" in value;
    isInstance = isInstance && "hasUpvote" in value;
    isInstance = isInstance && "isAccepted" in value;
    isInstance = isInstance && "prompt" in value;

    return isInstance;
}

export function RecordFromJSON(json: any): Record {
    return RecordFromJSONTyped(json, false);
}

export function RecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): Record {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'completion': !exists(json, 'completion') ? undefined : json['completion'],
        'contentGenerationId': json['content_generation_id'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ValidationResultFromJSON)),
        'hasUpvote': json['has_upvote'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isAccepted': json['is_accepted'],
        'modifiedAt': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'notInPromptWords': !exists(json, 'not_in_prompt_words') ? undefined : json['not_in_prompt_words'],
        'prompt': json['prompt'],
        'repeatedWords': !exists(json, 'repeated_words') ? undefined : (mapValues(json['repeated_words'], WordRepetitionDataFromJSON)),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'validatedAt': !exists(json, 'validated_at') ? undefined : (new Date(json['validated_at'])),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(ValidationResultFromJSON)),
    };
}

export function RecordToJSON(value?: Record | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'completion': value.completion,
        'has_upvote': value.hasUpvote,
        'id': value.id,
        'is_accepted': value.isAccepted,
        'prompt': value.prompt,
    };
}

