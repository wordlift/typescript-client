/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IncludeExclude,
  IncludeExcludeRequest,
} from '../models';
import {
    IncludeExcludeFromJSON,
    IncludeExcludeToJSON,
    IncludeExcludeRequestFromJSON,
    IncludeExcludeRequestToJSON,
} from '../models';

export interface UpdateIncludeExcludesRequest {
    includeExcludeRequest: Array<IncludeExcludeRequest>;
}

/**
 * 
 */
export class IncludeExcludesApi extends runtime.BaseAPI {

    /**
     * List the include and exclude configurations.
     * List
     */
    async listIncludeExcludesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IncludeExclude>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/accounts/me/include-excludes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncludeExcludeFromJSON));
    }

    /**
     * List the include and exclude configurations.
     * List
     */
    async listIncludeExcludes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IncludeExclude>> {
        const response = await this.listIncludeExcludesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update the include and exclude configurations.
     * Update
     */
    async updateIncludeExcludesRaw(requestParameters: UpdateIncludeExcludesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IncludeExclude>>> {
        if (requestParameters.includeExcludeRequest === null || requestParameters.includeExcludeRequest === undefined) {
            throw new runtime.RequiredError('includeExcludeRequest','Required parameter requestParameters.includeExcludeRequest was null or undefined when calling updateIncludeExcludes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/accounts/me/include-excludes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.includeExcludeRequest.map(IncludeExcludeRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncludeExcludeFromJSON));
    }

    /**
     * Update the include and exclude configurations.
     * Update
     */
    async updateIncludeExcludes(requestParameters: UpdateIncludeExcludesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IncludeExclude>> {
        const response = await this.updateIncludeExcludesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
