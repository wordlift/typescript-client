/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WithLimits } from './WithLimits';
import {
    WithLimitsFromJSON,
    WithLimitsFromJSONTyped,
    WithLimitsToJSON,
} from './WithLimits';

/**
 * A page object with links to move to other pages and the list of objects.
 * @export
 * @interface PageWithLimits
 */
export interface PageWithLimits {
    /**
     * The link to the first page.
     * @type {string}
     * @memberof PageWithLimits
     */
    first: string | null;
    /**
     * An array of objects.
     * @type {Array<WithLimits>}
     * @memberof PageWithLimits
     */
    items: Array<WithLimits>;
    /**
     * The link to the last page.
     * @type {string}
     * @memberof PageWithLimits
     */
    last: string | null;
    /**
     * The link to the next page or `null` if there's no page.
     * @type {string}
     * @memberof PageWithLimits
     */
    next: string | null;
    /**
     * The link to the previous page or `null` if there's no page.
     * @type {string}
     * @memberof PageWithLimits
     */
    prev: string | null;
    /**
     * The link to the current page.
     * @type {string}
     * @memberof PageWithLimits
     */
    self: string | null;
}

/**
 * Check if a given object implements the PageWithLimits interface.
 */
export function instanceOfPageWithLimits(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "first" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "last" in value;
    isInstance = isInstance && "next" in value;
    isInstance = isInstance && "prev" in value;
    isInstance = isInstance && "self" in value;

    return isInstance;
}

export function PageWithLimitsFromJSON(json: any): PageWithLimits {
    return PageWithLimitsFromJSONTyped(json, false);
}

export function PageWithLimitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PageWithLimits {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'first': json['first'],
        'items': ((json['items'] as Array<any>).map(WithLimitsFromJSON)),
        'last': json['last'],
        'next': json['next'],
        'prev': json['prev'],
        'self': json['self'],
    };
}

export function PageWithLimitsToJSON(value?: PageWithLimits | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'first': value.first,
        'items': ((value.items as Array<any>).map(WithLimitsToJSON)),
        'last': value.last,
        'next': value.next,
        'prev': value.prev,
        'self': value.self,
    };
}

