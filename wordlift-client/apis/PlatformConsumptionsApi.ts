/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageWithLimits,
} from '../models/index';
import {
    PageWithLimitsFromJSON,
    PageWithLimitsToJSON,
} from '../models/index';

export interface CreateOrUpdateMyPlatformConsumptionRequest {
    appliesTo: string;
    consumptionToAdd?: number;
}

export interface GetMyPlatformConsumptionRequest {
    appliesTo: string;
    includeSubscription?: boolean;
    includeLimit?: boolean;
}

/**
 * 
 */
export class PlatformConsumptionsApi extends runtime.BaseAPI {

    /**
     * Create or update the Platform Consumption for the authenticated user.
     * Create or update the Platform Consumption
     */
    async createOrUpdateMyPlatformConsumptionRaw(requestParameters: CreateOrUpdateMyPlatformConsumptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageWithLimits>> {
        if (requestParameters['appliesTo'] == null) {
            throw new runtime.RequiredError(
                'appliesTo',
                'Required parameter "appliesTo" was null or undefined when calling createOrUpdateMyPlatformConsumption().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appliesTo'] != null) {
            queryParameters['applies_to'] = requestParameters['appliesTo'];
        }

        if (requestParameters['consumptionToAdd'] != null) {
            queryParameters['consumption_to_add'] = requestParameters['consumptionToAdd'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/platform-limit/consumptions/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageWithLimitsFromJSON(jsonValue));
    }

    /**
     * Create or update the Platform Consumption for the authenticated user.
     * Create or update the Platform Consumption
     */
    async createOrUpdateMyPlatformConsumption(requestParameters: CreateOrUpdateMyPlatformConsumptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageWithLimits> {
        const response = await this.createOrUpdateMyPlatformConsumptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Platform Consumption for the authenticated user.
     * Get the Platform Consumption
     */
    async getMyPlatformConsumptionRaw(requestParameters: GetMyPlatformConsumptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageWithLimits>> {
        if (requestParameters['appliesTo'] == null) {
            throw new runtime.RequiredError(
                'appliesTo',
                'Required parameter "appliesTo" was null or undefined when calling getMyPlatformConsumption().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appliesTo'] != null) {
            queryParameters['applies_to'] = requestParameters['appliesTo'];
        }

        if (requestParameters['includeSubscription'] != null) {
            queryParameters['include_subscription'] = requestParameters['includeSubscription'];
        }

        if (requestParameters['includeLimit'] != null) {
            queryParameters['include_limit'] = requestParameters['includeLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/platform-limit/consumptions/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageWithLimitsFromJSON(jsonValue));
    }

    /**
     * Get the Platform Consumption for the authenticated user.
     * Get the Platform Consumption
     */
    async getMyPlatformConsumption(requestParameters: GetMyPlatformConsumptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageWithLimits> {
        const response = await this.getMyPlatformConsumptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
