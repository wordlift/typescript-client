/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntityGapRequest
 */
export interface EntityGapRequest {
    /**
     * The URL to analyze.
     * @type {string}
     * @memberof EntityGapRequest
     */
    url: string;
    /**
     * The search query to analyze.
     * @type {string}
     * @memberof EntityGapRequest
     */
    query: string;
    /**
     * The model
     * @type {string}
     * @memberof EntityGapRequest
     */
    model?: string;
    /**
     * Number of entities to highlight.
     * @type {number}
     * @memberof EntityGapRequest
     */
    numberOfEntities?: number;
    /**
     * The location name for the query, e.g. United Kingdom.
     * @type {string}
     * @memberof EntityGapRequest
     */
    queryLocationName?: string;
    /**
     * The search engine domain for the query, if not set will be chosen according to `query_location_name`
     * @type {string}
     * @memberof EntityGapRequest
     */
    querySearchEngine?: string;
}

/**
 * Check if a given object implements the EntityGapRequest interface.
 */
export function instanceOfEntityGapRequest(value: object): value is EntityGapRequest {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('query' in value) || value['query'] === undefined) return false;
    return true;
}

export function EntityGapRequestFromJSON(json: any): EntityGapRequest {
    return EntityGapRequestFromJSONTyped(json, false);
}

export function EntityGapRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityGapRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'query': json['query'],
        'model': json['model'] == null ? undefined : json['model'],
        'numberOfEntities': json['number_of_entities'] == null ? undefined : json['number_of_entities'],
        'queryLocationName': json['query_location_name'] == null ? undefined : json['query_location_name'],
        'querySearchEngine': json['query_search_engine'] == null ? undefined : json['query_search_engine'],
    };
}

export function EntityGapRequestToJSON(json: any): EntityGapRequest {
    return EntityGapRequestToJSONTyped(json, false);
}

export function EntityGapRequestToJSONTyped(value?: EntityGapRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'url': value['url'],
        'query': value['query'],
        'model': value['model'],
        'number_of_entities': value['numberOfEntities'],
        'query_location_name': value['queryLocationName'],
        'query_search_engine': value['querySearchEngine'],
    };
}

