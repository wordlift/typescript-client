/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WhenOperator } from './WhenOperator';
import {
    WhenOperatorFromJSON,
    WhenOperatorFromJSONTyped,
    WhenOperatorToJSON,
    WhenOperatorToJSONTyped,
} from './WhenOperator';
import type { Scope } from './Scope';
import {
    ScopeFromJSON,
    ScopeFromJSONTyped,
    ScopeToJSON,
    ScopeToJSONTyped,
} from './Scope';
import type { LevelEnum } from './LevelEnum';
import {
    LevelEnumFromJSON,
    LevelEnumFromJSONTyped,
    LevelEnumToJSON,
    LevelEnumToJSONTyped,
} from './LevelEnum';
import type { ValidationFix } from './ValidationFix';
import {
    ValidationFixFromJSON,
    ValidationFixFromJSONTyped,
    ValidationFixToJSON,
    ValidationFixToJSONTyped,
} from './ValidationFix';
import type { ProjectType } from './ProjectType';
import {
    ProjectTypeFromJSON,
    ProjectTypeFromJSONTyped,
    ProjectTypeToJSON,
    ProjectTypeToJSONTyped,
} from './ProjectType';
import type { WhatOperandLhs } from './WhatOperandLhs';
import {
    WhatOperandLhsFromJSON,
    WhatOperandLhsFromJSONTyped,
    WhatOperandLhsToJSON,
    WhatOperandLhsToJSONTyped,
} from './WhatOperandLhs';
import type { WhatOperator } from './WhatOperator';
import {
    WhatOperatorFromJSON,
    WhatOperatorFromJSONTyped,
    WhatOperatorToJSON,
    WhatOperatorToJSONTyped,
} from './WhatOperator';

/**
 * 
 * @export
 * @interface RuleRequest
 */
export interface RuleRequest {
    /**
     * Description for the rule
     * @type {string}
     * @memberof RuleRequest
     */
    description?: string;
    /**
     * The list of fixes to apply when the rule validation fails.
     * @type {Array<ValidationFix>}
     * @memberof RuleRequest
     */
    fixes?: Array<ValidationFix>;
    /**
     * 
     * @type {boolean}
     * @memberof RuleRequest
     */
    isEnabled?: boolean;
    /**
     * 
     * @type {LevelEnum}
     * @memberof RuleRequest
     */
    level: LevelEnum;
    /**
     * The rule name.
     * @type {string}
     * @memberof RuleRequest
     */
    name: string;
    /**
     * The project id, if applicable.
     * @type {number}
     * @memberof RuleRequest
     */
    projectId?: number;
    /**
     * 
     * @type {ProjectType}
     * @memberof RuleRequest
     */
    projectType?: ProjectType;
    /**
     * 
     * @type {Scope}
     * @memberof RuleRequest
     */
    scope: Scope;
    /**
     * The rule type, one of `field`, `word` or `code`. By default `field`.
     * @type {string}
     * @memberof RuleRequest
     */
    type: string;
    /**
     * 
     * @type {WhatOperandLhs}
     * @memberof RuleRequest
     */
    whatOperandLhs: WhatOperandLhs;
    /**
     * The right hand side operand for what condition.
     * @type {string}
     * @memberof RuleRequest
     */
    whatOperandRhs: string;
    /**
     * 
     * @type {WhatOperator}
     * @memberof RuleRequest
     */
    whatOperator: WhatOperator;
    /**
     * The left hand side  operand for when condition.
     * @type {string}
     * @memberof RuleRequest
     */
    whenOperandLhs: string;
    /**
     * The right hand side operand for when condition.
     * @type {string}
     * @memberof RuleRequest
     */
    whenOperandRhs: string;
    /**
     * 
     * @type {WhenOperator}
     * @memberof RuleRequest
     */
    whenOperator: WhenOperator;
}



/**
 * Check if a given object implements the RuleRequest interface.
 */
export function instanceOfRuleRequest(value: object): value is RuleRequest {
    if (!('level' in value) || value['level'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('whatOperandLhs' in value) || value['whatOperandLhs'] === undefined) return false;
    if (!('whatOperandRhs' in value) || value['whatOperandRhs'] === undefined) return false;
    if (!('whatOperator' in value) || value['whatOperator'] === undefined) return false;
    if (!('whenOperandLhs' in value) || value['whenOperandLhs'] === undefined) return false;
    if (!('whenOperandRhs' in value) || value['whenOperandRhs'] === undefined) return false;
    if (!('whenOperator' in value) || value['whenOperator'] === undefined) return false;
    return true;
}

export function RuleRequestFromJSON(json: any): RuleRequest {
    return RuleRequestFromJSONTyped(json, false);
}

export function RuleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : json['description'],
        'fixes': json['fixes'] == null ? undefined : ((json['fixes'] as Array<any>).map(ValidationFixFromJSON)),
        'isEnabled': json['is_enabled'] == null ? undefined : json['is_enabled'],
        'level': LevelEnumFromJSON(json['level']),
        'name': json['name'],
        'projectId': json['project_id'] == null ? undefined : json['project_id'],
        'projectType': json['project_type'] == null ? undefined : ProjectTypeFromJSON(json['project_type']),
        'scope': ScopeFromJSON(json['scope']),
        'type': json['type'],
        'whatOperandLhs': WhatOperandLhsFromJSON(json['what_operand_lhs']),
        'whatOperandRhs': json['what_operand_rhs'],
        'whatOperator': WhatOperatorFromJSON(json['what_operator']),
        'whenOperandLhs': json['when_operand_lhs'],
        'whenOperandRhs': json['when_operand_rhs'],
        'whenOperator': WhenOperatorFromJSON(json['when_operator']),
    };
}

export function RuleRequestToJSON(json: any): RuleRequest {
    return RuleRequestToJSONTyped(json, false);
}

export function RuleRequestToJSONTyped(value?: RuleRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'description': value['description'],
        'fixes': value['fixes'] == null ? undefined : ((value['fixes'] as Array<any>).map(ValidationFixToJSON)),
        'is_enabled': value['isEnabled'],
        'level': LevelEnumToJSON(value['level']),
        'name': value['name'],
        'project_id': value['projectId'],
        'project_type': ProjectTypeToJSON(value['projectType']),
        'scope': ScopeToJSON(value['scope']),
        'type': value['type'],
        'what_operand_lhs': WhatOperandLhsToJSON(value['whatOperandLhs']),
        'what_operand_rhs': value['whatOperandRhs'],
        'what_operator': WhatOperatorToJSON(value['whatOperator']),
        'when_operand_lhs': value['whenOperandLhs'],
        'when_operand_rhs': value['whenOperandRhs'],
        'when_operator': WhenOperatorToJSON(value['whenOperator']),
    };
}

