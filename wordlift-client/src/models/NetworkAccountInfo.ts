/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Network Account Information
 * @export
 * @interface NetworkAccountInfo
 */
export interface NetworkAccountInfo {
    /**
     * The Account Id
     * @type {number}
     * @memberof NetworkAccountInfo
     */
    readonly accountId?: number;
    /**
     * The Dataset Id
     * @type {string}
     * @memberof NetworkAccountInfo
     */
    readonly datasetId?: string;
    /**
     * The Dataset URI
     * @type {string}
     * @memberof NetworkAccountInfo
     */
    readonly datasetUri: string;
    /**
     * The website URL
     * @type {string}
     * @memberof NetworkAccountInfo
     */
    readonly url?: string;
}

/**
 * Check if a given object implements the NetworkAccountInfo interface.
 */
export function instanceOfNetworkAccountInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "datasetUri" in value;

    return isInstance;
}

export function NetworkAccountInfoFromJSON(json: any): NetworkAccountInfo {
    return NetworkAccountInfoFromJSONTyped(json, false);
}

export function NetworkAccountInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): NetworkAccountInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'datasetId': !exists(json, 'datasetId') ? undefined : json['datasetId'],
        'datasetUri': json['datasetUri'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function NetworkAccountInfoToJSON(value?: NetworkAccountInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
    };
}

