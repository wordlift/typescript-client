/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InspectResponse,
} from '../models';
import {
    InspectResponseFromJSON,
    InspectResponseToJSON,
} from '../models';

export interface GetInspectRequest {
    u: string;
    f: GetInspectFEnum;
    classes?: Array<string>;
}

/**
 * 
 */
export class InspectorApi extends runtime.BaseAPI {

    /**
     * Inspect a URL to perform a variety of tasks defined by the list of applied filters.
     * Inspect
     */
    async getInspectRaw(requestParameters: GetInspectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InspectResponse>> {
        if (requestParameters.u === null || requestParameters.u === undefined) {
            throw new runtime.RequiredError('u','Required parameter requestParameters.u was null or undefined when calling getInspect.');
        }

        if (requestParameters.f === null || requestParameters.f === undefined) {
            throw new runtime.RequiredError('f','Required parameter requestParameters.f was null or undefined when calling getInspect.');
        }

        const queryParameters: any = {};

        if (requestParameters.u !== undefined) {
            queryParameters['u'] = requestParameters.u;
        }

        if (requestParameters.f !== undefined) {
            queryParameters['f'] = requestParameters.f;
        }

        if (requestParameters.classes) {
            queryParameters['classes'] = requestParameters.classes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/inspect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InspectResponseFromJSON(jsonValue));
    }

    /**
     * Inspect a URL to perform a variety of tasks defined by the list of applied filters.
     * Inspect
     */
    async getInspect(requestParameters: GetInspectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InspectResponse> {
        const response = await this.getInspectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetInspectFEnum = {
    Validator: 'validator',
    ContentAnalysis: 'content-analysis',
    MockLanguageDetection: 'mock-language-detection',
    BrowserResponse: 'browser-response',
    JenaGraph: 'jena-graph',
    Links: 'links',
    BrowserResponse: 'browser-response',
    LinguaLanguageDetection: 'lingua-language-detection',
    LanguageDetection: 'language-detection',
    RedlinkContentAnalysis: 'redlink-content-analysis',
    Summarize: 'summarize',
    Text: 'text',
    Validator: 'validator',
    Xmltei: 'xmltei',
    Classify: 'classify'
} as const;
export type GetInspectFEnum = typeof GetInspectFEnum[keyof typeof GetInspectFEnum];
