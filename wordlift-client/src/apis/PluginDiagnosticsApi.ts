/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  DiagnosticPluginRequest,
} from '../models';
import {
    AccountFromJSON,
    AccountToJSON,
    DiagnosticPluginRequestFromJSON,
    DiagnosticPluginRequestToJSON,
} from '../models';

export interface UpdateDiagnosticPluginCollectionRequest {
    account: Account;
    diagnosticPluginRequest: Array<DiagnosticPluginRequest>;
}

/**
 * 
 */
export class PluginDiagnosticsApi extends runtime.BaseAPI {

    /**
     * Replace the list of the plugins for the current account with the one provided by the client
     * Update
     */
    async updateDiagnosticPluginCollectionRaw(requestParameters: UpdateDiagnosticPluginCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling updateDiagnosticPluginCollection.');
        }

        if (requestParameters.diagnosticPluginRequest === null || requestParameters.diagnosticPluginRequest === undefined) {
            throw new runtime.RequiredError('diagnosticPluginRequest','Required parameter requestParameters.diagnosticPluginRequest was null or undefined when calling updateDiagnosticPluginCollection.');
        }

        const queryParameters: any = {};

        if (requestParameters.account !== undefined) {
            queryParameters['account'] = requestParameters.account;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/accounts/me/plugin/diagnostics/plugins-collection`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.diagnosticPluginRequest.map(DiagnosticPluginRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace the list of the plugins for the current account with the one provided by the client
     * Update
     */
    async updateDiagnosticPluginCollection(requestParameters: UpdateDiagnosticPluginCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateDiagnosticPluginCollectionRaw(requestParameters, initOverrides);
    }

}
