/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ValidationResult } from './ValidationResult';
import {
    ValidationResultFromJSON,
    ValidationResultFromJSONTyped,
    ValidationResultToJSON,
    ValidationResultToJSONTyped,
} from './ValidationResult';

/**
 * Generated Q&A content.
 * @export
 * @interface QuestionAndAnswer
 */
export interface QuestionAndAnswer {
    /**
     * The generated answer.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    answer?: string;
    /**
     * The create date-time.
     * @type {Date}
     * @memberof QuestionAndAnswer
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Set<string>}
     * @memberof QuestionAndAnswer
     */
    entityGaps?: Set<string>;
    /**
     * The set of errors found for the answer.
     * @type {Array<ValidationResult>}
     * @memberof QuestionAndAnswer
     */
    readonly errors?: Array<ValidationResult>;
    /**
     * The unique id.
     * @type {number}
     * @memberof QuestionAndAnswer
     */
    readonly id?: number;
    /**
     * The webpage IRI tied to this Q&A.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    iri: string;
    /**
     * The deleted flag.
     * @type {boolean}
     * @memberof QuestionAndAnswer
     */
    isDeleted?: boolean;
    /**
     * The published flag.
     * @type {boolean}
     * @memberof QuestionAndAnswer
     */
    isPublished?: boolean;
    /**
     * The last modified date-time.
     * @type {Date}
     * @memberof QuestionAndAnswer
     */
    readonly modifiedAt?: Date;
    /**
     * The generated question.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    question?: string;
    /**
     * 
     * @type {number}
     * @memberof QuestionAndAnswer
     */
    smartContentId?: number;
    /**
     * The webpage URL tied to this Q&A.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    url: string;
    /**
     * The set of warnings found for the answer.
     * @type {Array<ValidationResult>}
     * @memberof QuestionAndAnswer
     */
    readonly warnings?: Array<ValidationResult>;
}

/**
 * Check if a given object implements the QuestionAndAnswer interface.
 */
export function instanceOfQuestionAndAnswer(value: object): value is QuestionAndAnswer {
    if (!('iri' in value) || value['iri'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function QuestionAndAnswerFromJSON(json: any): QuestionAndAnswer {
    return QuestionAndAnswerFromJSONTyped(json, false);
}

export function QuestionAndAnswerFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionAndAnswer {
    if (json == null) {
        return json;
    }
    return {
        
        'answer': json['answer'] == null ? undefined : json['answer'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'entityGaps': json['entity_gaps'] == null ? undefined : new Set(json['entity_gaps']),
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(ValidationResultFromJSON)),
        'id': json['id'] == null ? undefined : json['id'],
        'iri': json['iri'],
        'isDeleted': json['is_deleted'] == null ? undefined : json['is_deleted'],
        'isPublished': json['is_published'] == null ? undefined : json['is_published'],
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'question': json['question'] == null ? undefined : json['question'],
        'smartContentId': json['smart_content_id'] == null ? undefined : json['smart_content_id'],
        'url': json['url'],
        'warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(ValidationResultFromJSON)),
    };
}

export function QuestionAndAnswerToJSON(json: any): QuestionAndAnswer {
    return QuestionAndAnswerToJSONTyped(json, false);
}

export function QuestionAndAnswerToJSONTyped(value?: Omit<QuestionAndAnswer, 'created_at'|'errors'|'id'|'modified_at'|'warnings'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'answer': value['answer'],
        'entity_gaps': value['entityGaps'] == null ? undefined : Array.from(value['entityGaps'] as Set<any>),
        'iri': value['iri'],
        'is_deleted': value['isDeleted'],
        'is_published': value['isPublished'],
        'question': value['question'],
        'smart_content_id': value['smartContentId'],
        'url': value['url'],
    };
}

