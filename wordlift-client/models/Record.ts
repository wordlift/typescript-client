/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WordRepetitionData } from './WordRepetitionData';
import {
    WordRepetitionDataFromJSON,
    WordRepetitionDataFromJSONTyped,
    WordRepetitionDataToJSON,
    WordRepetitionDataToJSONTyped,
} from './WordRepetitionData';
import type { ValidationResult } from './ValidationResult';
import {
    ValidationResultFromJSON,
    ValidationResultFromJSONTyped,
    ValidationResultToJSON,
    ValidationResultToJSONTyped,
} from './ValidationResult';

/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    completion?: string;
    /**
     * The parent content generation id.
     * @type {number}
     * @memberof Record
     */
    readonly contentGenerationId: number;
    /**
     * The data from knowledge graph after applying the graphql query.
     * @type {object}
     * @memberof Record
     */
    readonly data?: object;
    /**
     * The set of errors found for record.
     * @type {Array<ValidationResult>}
     * @memberof Record
     */
    readonly errors?: Array<ValidationResult>;
    /**
     * This indicates whether the user upvoted the completion.
     * @type {boolean}
     * @memberof Record
     */
    hasUpvote: boolean;
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    id?: number;
    /**
     * This indicates whether the completion is accepted by the user.
     * @type {boolean}
     * @memberof Record
     */
    isAccepted: boolean;
    /**
     * The last modified date-time.
     * @type {Date}
     * @memberof Record
     */
    readonly modifiedAt?: Date;
    /**
     * Words in completion that are not in the prompt.
     * @type {Set<string>}
     * @memberof Record
     */
    readonly notInPromptWords?: Set<string>;
    /**
     * The prompt.
     * @type {string}
     * @memberof Record
     */
    prompt: string;
    /**
     * Words in completion which are repeated.
     * @type {{ [key: string]: WordRepetitionData; }}
     * @memberof Record
     */
    readonly repeatedWords?: { [key: string]: WordRepetitionData; };
    /**
     * The status of the record, whether it's accepted, with errors, with warnings or valid.
     * @type {string}
     * @memberof Record
     */
    readonly status?: RecordStatusEnum;
    /**
     * The last validation date-time.
     * @type {Date}
     * @memberof Record
     */
    readonly validatedAt?: Date;
    /**
     * The set of errors found for record.
     * @type {Array<ValidationResult>}
     * @memberof Record
     */
    readonly warnings?: Array<ValidationResult>;
}


/**
 * @export
 */
export const RecordStatusEnum = {
    Accepted: 'accepted',
    Warnings: 'warnings',
    Errors: 'errors',
    Valid: 'valid'
} as const;
export type RecordStatusEnum = typeof RecordStatusEnum[keyof typeof RecordStatusEnum];


/**
 * Check if a given object implements the Record interface.
 */
export function instanceOfRecord(value: object): value is Record {
    if (!('contentGenerationId' in value) || value['contentGenerationId'] === undefined) return false;
    if (!('hasUpvote' in value) || value['hasUpvote'] === undefined) return false;
    if (!('isAccepted' in value) || value['isAccepted'] === undefined) return false;
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    return true;
}

export function RecordFromJSON(json: any): Record {
    return RecordFromJSONTyped(json, false);
}

export function RecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): Record {
    if (json == null) {
        return json;
    }
    return {
        
        'completion': json['completion'] == null ? undefined : json['completion'],
        'contentGenerationId': json['content_generation_id'],
        'data': json['data'] == null ? undefined : json['data'],
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(ValidationResultFromJSON)),
        'hasUpvote': json['has_upvote'],
        'id': json['id'] == null ? undefined : json['id'],
        'isAccepted': json['is_accepted'],
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'notInPromptWords': json['not_in_prompt_words'] == null ? undefined : new Set(json['not_in_prompt_words']),
        'prompt': json['prompt'],
        'repeatedWords': json['repeated_words'] == null ? undefined : (mapValues(json['repeated_words'], WordRepetitionDataFromJSON)),
        'status': json['status'] == null ? undefined : json['status'],
        'validatedAt': json['validated_at'] == null ? undefined : (new Date(json['validated_at'])),
        'warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(ValidationResultFromJSON)),
    };
}

export function RecordToJSON(json: any): Record {
    return RecordToJSONTyped(json, false);
}

export function RecordToJSONTyped(value?: Omit<Record, 'content_generation_id'|'data'|'errors'|'modified_at'|'not_in_prompt_words'|'repeated_words'|'status'|'validated_at'|'warnings'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'completion': value['completion'],
        'has_upvote': value['hasUpvote'],
        'id': value['id'],
        'is_accepted': value['isAccepted'],
        'prompt': value['prompt'],
    };
}

