/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BatchRequest,
} from '../models';
import {
    BatchRequestFromJSON,
    BatchRequestToJSON,
} from '../models';

export interface CreateOrUpdateEntities1Request {
    batchRequest: Array<BatchRequest>;
}

export interface CreateOrUpdateEntityRequest {
    uri: string;
    body: string;
    _private?: boolean;
}

export interface DeleteEntityRequest {
    uri: string;
}

/**
 * 
 */
export class DatasetApi extends runtime.BaseAPI {

    /**
     * Create or update many entities in the Knowledge Graph.
     * Create or update many
     */
    async createOrUpdateEntities1Raw(requestParameters: CreateOrUpdateEntities1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.batchRequest === null || requestParameters.batchRequest === undefined) {
            throw new runtime.RequiredError('batchRequest','Required parameter requestParameters.batchRequest was null or undefined when calling createOrUpdateEntities1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/dataset/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.batchRequest.map(BatchRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create or update many entities in the Knowledge Graph.
     * Create or update many
     */
    async createOrUpdateEntities1(requestParameters: CreateOrUpdateEntities1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.createOrUpdateEntities1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update an entity in the Knowledge Graph.
     * Create or update one
     */
    async createOrUpdateEntityRaw(requestParameters: CreateOrUpdateEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uri === null || requestParameters.uri === undefined) {
            throw new runtime.RequiredError('uri','Required parameter requestParameters.uri was null or undefined when calling createOrUpdateEntity.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createOrUpdateEntity.');
        }

        const queryParameters: any = {};

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        if (requestParameters._private !== undefined) {
            queryParameters['private'] = requestParameters._private;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/ld+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/dataset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or update an entity in the Knowledge Graph.
     * Create or update one
     */
    async createOrUpdateEntity(requestParameters: CreateOrUpdateEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createOrUpdateEntityRaw(requestParameters, initOverrides);
    }

    /**
     * Delete all the entities in the Knowledge Graph.
     * Delete all
     */
    async deleteAllEntitiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/dataset/all`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all the entities in the Knowledge Graph.
     * Delete all
     */
    async deleteAllEntities(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAllEntitiesRaw(initOverrides);
    }

    /**
     * Delete an entity from the Knowledge Graph.
     * Delete one
     */
    async deleteEntityRaw(requestParameters: DeleteEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uri === null || requestParameters.uri === undefined) {
            throw new runtime.RequiredError('uri','Required parameter requestParameters.uri was null or undefined when calling deleteEntity.');
        }

        const queryParameters: any = {};

        if (requestParameters.uri !== undefined) {
            queryParameters['uri'] = requestParameters.uri;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/dataset`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an entity from the Knowledge Graph.
     * Delete one
     */
    async deleteEntity(requestParameters: DeleteEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntityRaw(requestParameters, initOverrides);
    }

}
