/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EntityMatch } from './EntityMatch';
import {
    EntityMatchFromJSON,
    EntityMatchFromJSONTyped,
    EntityMatchToJSON,
    EntityMatchToJSONTyped,
} from './EntityMatch';

/**
 * Object representing single annotation.
 * @export
 * @interface Annotation
 */
export interface Annotation {
    /**
     * An unique id.
     * @type {string}
     * @memberof Annotation
     */
    annotationId?: string;
    /**
     * The starting posistion of annotation in content (zero-indexed & non negative ).
     * @type {number}
     * @memberof Annotation
     */
    start?: number;
    /**
     * The ending posistion of annotation in content (zero-indexed & non negative ).
     * @type {number}
     * @memberof Annotation
     */
    end?: number;
    /**
     * The annotated text.
     * @type {string}
     * @memberof Annotation
     */
    text?: string;
    /**
     * The list of entities which the annotation matches.
     * @type {Array<EntityMatch>}
     * @memberof Annotation
     */
    entityMatches?: Array<EntityMatch>;
}

/**
 * Check if a given object implements the Annotation interface.
 */
export function instanceOfAnnotation(value: object): value is Annotation {
    return true;
}

export function AnnotationFromJSON(json: any): Annotation {
    return AnnotationFromJSONTyped(json, false);
}

export function AnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Annotation {
    if (json == null) {
        return json;
    }
    return {
        
        'annotationId': json['annotationId'] == null ? undefined : json['annotationId'],
        'start': json['start'] == null ? undefined : json['start'],
        'end': json['end'] == null ? undefined : json['end'],
        'text': json['text'] == null ? undefined : json['text'],
        'entityMatches': json['entityMatches'] == null ? undefined : ((json['entityMatches'] as Array<any>).map(EntityMatchFromJSON)),
    };
}

export function AnnotationToJSON(json: any): Annotation {
    return AnnotationToJSONTyped(json, false);
}

export function AnnotationToJSONTyped(value?: Annotation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'annotationId': value['annotationId'],
        'start': value['start'],
        'end': value['end'],
        'text': value['text'],
        'entityMatches': value['entityMatches'] == null ? undefined : ((value['entityMatches'] as Array<any>).map(EntityMatchToJSON)),
    };
}

