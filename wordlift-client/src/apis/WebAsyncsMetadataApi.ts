/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WebAsync,
} from '../models';
import {
    WebAsyncFromJSON,
    WebAsyncToJSON,
} from '../models';

export interface GetWebAsyncRequest {
    id: string;
}

/**
 * 
 */
export class WebAsyncsMetadataApi extends runtime.BaseAPI {

    /**
     * Get a Web Async operation by its id.
     * Get by id
     */
    async getWebAsyncRaw(requestParameters: GetWebAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebAsync>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWebAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/webasyncs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebAsyncFromJSON(jsonValue));
    }

    /**
     * Get a Web Async operation by its id.
     * Get by id
     */
    async getWebAsync(requestParameters: GetWebAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebAsync> {
        const response = await this.getWebAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all Web Async operations.
     * List
     */
    async listRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WebAsync>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/webasyncs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WebAsyncFromJSON));
    }

    /**
     * List all Web Async operations.
     * List
     */
    async list(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WebAsync>> {
        const response = await this.listRaw(initOverrides);
        return await response.value();
    }

}
