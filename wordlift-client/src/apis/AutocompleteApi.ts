/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AutocompleteResult,
} from '../models/index';
import {
    AutocompleteResultFromJSON,
    AutocompleteResultToJSON,
} from '../models/index';

export interface GetRequest {
    query: string;
    language: string;
    scope?: GetScopeEnum;
    limit?: string;
    exclude?: Set<string>;
}

/**
 * 
 */
export class AutocompleteApi extends runtime.BaseAPI {

    /**
     * The autocomplete endpoint suggests entities from Linked Data that match the provided query.
     * Get
     */
    async getRaw(requestParameters: GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutocompleteResult>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling get().'
            );
        }

        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling get().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['exclude'] != null) {
            queryParameters['exclude'] = requestParameters['exclude'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/autocomplete`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutocompleteResultFromJSON(jsonValue));
    }

    /**
     * The autocomplete endpoint suggests entities from Linked Data that match the provided query.
     * Get
     */
    async get(requestParameters: GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutocompleteResult> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetScopeEnum = {
    Cloud: 'cloud'
} as const;
export type GetScopeEnum = typeof GetScopeEnum[keyof typeof GetScopeEnum];
