/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagePlatformLimit,
  PlatformLimit,
  PlatformLimitRequest,
} from '../models';
import {
    PagePlatformLimitFromJSON,
    PagePlatformLimitToJSON,
    PlatformLimitFromJSON,
    PlatformLimitToJSON,
    PlatformLimitRequestFromJSON,
    PlatformLimitRequestToJSON,
} from '../models';

export interface CreatePlatformLimitRequest {
    platformLimitRequest: PlatformLimitRequest;
}

export interface DeletePlatformLimitRequest {
    id: number;
}

export interface GetPlatformLimitRequest {
    id: number;
}

export interface ListPlatformLimitsRequest {
    basedOnIn?: Set<ListPlatformLimitsBasedOnInEnum>;
    basedOnValueIn?: Set<string>;
    appliesToIn?: Set<string>;
    scopeIn?: Set<ListPlatformLimitsScopeInEnum>;
}

export interface UpdatePlatformLimitRequest {
    id: number;
    platformLimitRequest: PlatformLimitRequest;
}

/**
 * 
 */
export class PlatformLimitsApi extends runtime.BaseAPI {

    /**
     * Create a platform limit.
     * Create Platform Limit
     */
    async createPlatformLimitRaw(requestParameters: CreatePlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformLimit>> {
        if (requestParameters.platformLimitRequest === null || requestParameters.platformLimitRequest === undefined) {
            throw new runtime.RequiredError('platformLimitRequest','Required parameter requestParameters.platformLimitRequest was null or undefined when calling createPlatformLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/platform-limit/limits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformLimitRequestToJSON(requestParameters.platformLimitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformLimitFromJSON(jsonValue));
    }

    /**
     * Create a platform limit.
     * Create Platform Limit
     */
    async createPlatformLimit(requestParameters: CreatePlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformLimit> {
        const response = await this.createPlatformLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a platform limit.
     * Delete Platform Limit
     */
    async deletePlatformLimitRaw(requestParameters: DeletePlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePlatformLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/platform-limit/limits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a platform limit.
     * Delete Platform Limit
     */
    async deletePlatformLimit(requestParameters: DeletePlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePlatformLimitRaw(requestParameters, initOverrides);
    }

    /**
     * Get a platform limit.
     * Get Platform Limit
     */
    async getPlatformLimitRaw(requestParameters: GetPlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformLimit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPlatformLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/platform-limit/limits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformLimitFromJSON(jsonValue));
    }

    /**
     * Get a platform limit.
     * Get Platform Limit
     */
    async getPlatformLimit(requestParameters: GetPlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformLimit> {
        const response = await this.getPlatformLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the platform limits.
     * List Platform Limits
     */
    async listPlatformLimitsRaw(requestParameters: ListPlatformLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePlatformLimit>> {
        const queryParameters: any = {};

        if (requestParameters.basedOnIn) {
            queryParameters['based_on_in'] = requestParameters.basedOnIn;
        }

        if (requestParameters.basedOnValueIn) {
            queryParameters['based_on_value_in'] = requestParameters.basedOnValueIn;
        }

        if (requestParameters.appliesToIn) {
            queryParameters['applies_to_in'] = requestParameters.appliesToIn;
        }

        if (requestParameters.scopeIn) {
            queryParameters['scope_in'] = requestParameters.scopeIn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/platform-limit/limits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePlatformLimitFromJSON(jsonValue));
    }

    /**
     * List the platform limits.
     * List Platform Limits
     */
    async listPlatformLimits(requestParameters: ListPlatformLimitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePlatformLimit> {
        const response = await this.listPlatformLimitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a platform limit.
     * Update Platform Limit
     */
    async updatePlatformLimitRaw(requestParameters: UpdatePlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformLimit>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePlatformLimit.');
        }

        if (requestParameters.platformLimitRequest === null || requestParameters.platformLimitRequest === undefined) {
            throw new runtime.RequiredError('platformLimitRequest','Required parameter requestParameters.platformLimitRequest was null or undefined when calling updatePlatformLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/platform-limit/limits/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformLimitRequestToJSON(requestParameters.platformLimitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformLimitFromJSON(jsonValue));
    }

    /**
     * Update a platform limit.
     * Update Platform Limit
     */
    async updatePlatformLimit(requestParameters: UpdatePlatformLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformLimit> {
        const response = await this.updatePlatformLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListPlatformLimitsBasedOnInEnum = {
    Sku: 'SKU'
} as const;
export type ListPlatformLimitsBasedOnInEnum = typeof ListPlatformLimitsBasedOnInEnum[keyof typeof ListPlatformLimitsBasedOnInEnum];
/**
 * @export
 */
export const ListPlatformLimitsScopeInEnum = {
    Account: 'ACCOUNT',
    Subscription: 'SUBSCRIPTION'
} as const;
export type ListPlatformLimitsScopeInEnum = typeof ListPlatformLimitsScopeInEnum[keyof typeof ListPlatformLimitsScopeInEnum];
