/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetail,
  Request2,
  Response2,
} from '../models/index';
import {
    ProblemDetailFromJSON,
    ProblemDetailToJSON,
    Request2FromJSON,
    Request2ToJSON,
    Response2FromJSON,
    Response2ToJSON,
} from '../models/index';

export interface RedeemCodeRequest {
    request2: Request2;
}

/**
 * 
 */
export class RedeemCodesApi extends runtime.BaseAPI {

    /**
     * Redeem the provided code and get a key
     */
    async redeemCodeRaw(requestParameters: RedeemCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response2>> {
        if (requestParameters['request2'] == null) {
            throw new runtime.RequiredError(
                'request2',
                'Required parameter "request2" was null or undefined when calling redeemCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/redeem-codes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Request2ToJSON(requestParameters['request2']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Response2FromJSON(jsonValue));
    }

    /**
     * Redeem the provided code and get a key
     */
    async redeemCode(requestParameters: RedeemCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response2> {
        const response = await this.redeemCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
