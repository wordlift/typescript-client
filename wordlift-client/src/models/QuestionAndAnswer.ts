/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValidationResult } from './ValidationResult';
import {
    ValidationResultFromJSON,
    ValidationResultFromJSONTyped,
    ValidationResultToJSON,
} from './ValidationResult';

/**
 * Generated Q&A content.
 * @export
 * @interface QuestionAndAnswer
 */
export interface QuestionAndAnswer {
    /**
     * The generated answer.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    answer?: string;
    /**
     * The create date-time.
     * @type {Date}
     * @memberof QuestionAndAnswer
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Set<string>}
     * @memberof QuestionAndAnswer
     */
    entityGaps?: Set<string>;
    /**
     * The set of errors found for the answer.
     * @type {Array<ValidationResult>}
     * @memberof QuestionAndAnswer
     */
    readonly errors?: Array<ValidationResult>;
    /**
     * The unique id.
     * @type {number}
     * @memberof QuestionAndAnswer
     */
    readonly id?: number;
    /**
     * The webpage IRI tied to this Q&A.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    iri: string;
    /**
     * The deleted flag.
     * @type {boolean}
     * @memberof QuestionAndAnswer
     */
    isDeleted?: boolean;
    /**
     * The published flag.
     * @type {boolean}
     * @memberof QuestionAndAnswer
     */
    isPublished?: boolean;
    /**
     * The last modified date-time.
     * @type {Date}
     * @memberof QuestionAndAnswer
     */
    readonly modifiedAt?: Date;
    /**
     * The generated question.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    question?: string;
    /**
     * 
     * @type {number}
     * @memberof QuestionAndAnswer
     */
    smartContentId?: number;
    /**
     * The webpage URL tied to this Q&A.
     * @type {string}
     * @memberof QuestionAndAnswer
     */
    url: string;
    /**
     * The set of warnings found for the answer.
     * @type {Array<ValidationResult>}
     * @memberof QuestionAndAnswer
     */
    readonly warnings?: Array<ValidationResult>;
}

/**
 * Check if a given object implements the QuestionAndAnswer interface.
 */
export function instanceOfQuestionAndAnswer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "iri" in value;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function QuestionAndAnswerFromJSON(json: any): QuestionAndAnswer {
    return QuestionAndAnswerFromJSONTyped(json, false);
}

export function QuestionAndAnswerFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionAndAnswer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'answer': !exists(json, 'answer') ? undefined : json['answer'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'entityGaps': !exists(json, 'entity_gaps') ? undefined : json['entity_gaps'],
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ValidationResultFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'iri': json['iri'],
        'isDeleted': !exists(json, 'is_deleted') ? undefined : json['is_deleted'],
        'isPublished': !exists(json, 'is_published') ? undefined : json['is_published'],
        'modifiedAt': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'question': !exists(json, 'question') ? undefined : json['question'],
        'smartContentId': !exists(json, 'smart_content_id') ? undefined : json['smart_content_id'],
        'url': json['url'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(ValidationResultFromJSON)),
    };
}

export function QuestionAndAnswerToJSON(value?: QuestionAndAnswer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'answer': value.answer,
        'entity_gaps': value.entityGaps === undefined ? undefined : Array.from(value.entityGaps as Set<any>),
        'iri': value.iri,
        'is_deleted': value.isDeleted,
        'is_published': value.isPublished,
        'question': value.question,
        'smart_content_id': value.smartContentId,
        'url': value.url,
    };
}

