/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ValidationTypeEnum } from './ValidationTypeEnum';
import {
    ValidationTypeEnumFromJSON,
    ValidationTypeEnumFromJSONTyped,
    ValidationTypeEnumToJSON,
    ValidationTypeEnumToJSONTyped,
} from './ValidationTypeEnum';

/**
 * The list of fixes to apply when the rule validation fails.
 * @export
 * @interface ValidationFix
 */
export interface ValidationFix {
    /**
     * 
     * @type {ValidationTypeEnum}
     * @memberof ValidationFix
     */
    type?: ValidationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ValidationFix
     */
    what?: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationFix
     */
    _with?: string;
}



/**
 * Check if a given object implements the ValidationFix interface.
 */
export function instanceOfValidationFix(value: object): value is ValidationFix {
    return true;
}

export function ValidationFixFromJSON(json: any): ValidationFix {
    return ValidationFixFromJSONTyped(json, false);
}

export function ValidationFixFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidationFix {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : ValidationTypeEnumFromJSON(json['type']),
        'what': json['what'] == null ? undefined : json['what'],
        '_with': json['with'] == null ? undefined : json['with'],
    };
}

export function ValidationFixToJSON(json: any): ValidationFix {
    return ValidationFixToJSONTyped(json, false);
}

export function ValidationFixToJSONTyped(value?: ValidationFix | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': ValidationTypeEnumToJSON(value['type']),
        'what': value['what'],
        'with': value['_with'],
    };
}

