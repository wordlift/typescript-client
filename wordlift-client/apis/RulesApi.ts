/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageRule,
  ProjectType,
  Rule,
  RuleRequest,
  Scope,
} from '../models/index';
import {
    PageRuleFromJSON,
    PageRuleToJSON,
    ProjectTypeFromJSON,
    ProjectTypeToJSON,
    RuleFromJSON,
    RuleToJSON,
    RuleRequestFromJSON,
    RuleRequestToJSON,
    ScopeFromJSON,
    ScopeToJSON,
} from '../models/index';

export interface CopyRulesRequest {
    projectType: ProjectType;
    fromProjectId: number;
    toProjectId: number;
}

export interface CreateRuleRequest {
    ruleRequest: RuleRequest;
}

export interface DeleteRuleRequest {
    id: number;
}

export interface ListRulesRequest {
    cursor?: string;
    limit?: number;
    projectId?: number;
    projectType?: ProjectType;
    scope?: Scope;
}

export interface UpdateRuleRequest {
    id: number;
    ruleRequest: RuleRequest;
}

export interface UpdateRuleCollectionRequest {
    projectId: number;
    projectType: ProjectType;
    ruleRequest: Array<RuleRequest>;
}

/**
 * 
 */
export class RulesApi extends runtime.BaseAPI {

    /**
     * Copy
     */
    async copyRulesRaw(requestParameters: CopyRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectType'] == null) {
            throw new runtime.RequiredError(
                'projectType',
                'Required parameter "projectType" was null or undefined when calling copyRules().'
            );
        }

        if (requestParameters['fromProjectId'] == null) {
            throw new runtime.RequiredError(
                'fromProjectId',
                'Required parameter "fromProjectId" was null or undefined when calling copyRules().'
            );
        }

        if (requestParameters['toProjectId'] == null) {
            throw new runtime.RequiredError(
                'toProjectId',
                'Required parameter "toProjectId" was null or undefined when calling copyRules().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        if (requestParameters['fromProjectId'] != null) {
            queryParameters['from_project_id'] = requestParameters['fromProjectId'];
        }

        if (requestParameters['toProjectId'] != null) {
            queryParameters['to_project_id'] = requestParameters['toProjectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/rules/copies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Copy
     */
    async copyRules(requestParameters: CopyRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.copyRulesRaw(requestParameters, initOverrides);
    }

    /**
     * Create
     */
    async createRuleRaw(requestParameters: CreateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters['ruleRequest'] == null) {
            throw new runtime.RequiredError(
                'ruleRequest',
                'Required parameter "ruleRequest" was null or undefined when calling createRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleRequestToJSON(requestParameters['ruleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createRule(requestParameters: CreateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rule> {
        const response = await this.createRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deleteRuleRaw(requestParameters: DeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete
     */
    async deleteRule(requestParameters: DeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRuleRaw(requestParameters, initOverrides);
    }

    /**
     * List
     */
    async listRulesRaw(requestParameters: ListRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageRule>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageRuleFromJSON(jsonValue));
    }

    /**
     * List
     */
    async listRules(requestParameters: ListRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageRule> {
        const response = await this.listRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updateRuleRaw(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rule>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRule().'
            );
        }

        if (requestParameters['ruleRequest'] == null) {
            throw new runtime.RequiredError(
                'ruleRequest',
                'Required parameter "ruleRequest" was null or undefined when calling updateRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RuleRequestToJSON(requestParameters['ruleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async updateRule(requestParameters: UpdateRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rule> {
        const response = await this.updateRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updateRuleCollectionRaw(requestParameters: UpdateRuleCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Rule>>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateRuleCollection().'
            );
        }

        if (requestParameters['projectType'] == null) {
            throw new runtime.RequiredError(
                'projectType',
                'Required parameter "projectType" was null or undefined when calling updateRuleCollection().'
            );
        }

        if (requestParameters['ruleRequest'] == null) {
            throw new runtime.RequiredError(
                'ruleRequest',
                'Required parameter "ruleRequest" was null or undefined when calling updateRuleCollection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectId'] != null) {
            queryParameters['project_id'] = requestParameters['projectId'];
        }

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/rules-collection`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['ruleRequest']!.map(RuleRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RuleFromJSON));
    }

    /**
     * Update
     */
    async updateRuleCollection(requestParameters: UpdateRuleCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Rule>> {
        const response = await this.updateRuleCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
