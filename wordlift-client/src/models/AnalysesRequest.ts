/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The analysis request.
 * @export
 * @interface AnalysesRequest
 */
export interface AnalysesRequest {
    /**
     * The text to analyse.
     * @type {string}
     * @memberof AnalysesRequest
     */
    text?: string;
    /**
     * The URL to analyse.
     * @type {string}
     * @memberof AnalysesRequest
     */
    url?: string;
    /**
     * The query string to analyse.
     * @type {string}
     * @memberof AnalysesRequest
     */
    query?: string;
    /**
     * The html to analyse.
     * @type {string}
     * @memberof AnalysesRequest
     */
    html?: string;
    /**
     * The language code used for content analysis, e.g. `en`.
     * @type {string}
     * @memberof AnalysesRequest
     */
    languageCode?: string;
    /**
     * The location name for the query, e.g. United Kingdom.
     * @type {string}
     * @memberof AnalysesRequest
     */
    queryLocationName?: string;
    /**
     * The search engine domain for the query, if not set will be chosen according to `query_location_name`
     * @type {string}
     * @memberof AnalysesRequest
     */
    querySearchEngine?: string;
    /**
     * Whether to include results from Linked Data (e.g. DBpedia), by default true.
     * @type {boolean}
     * @memberof AnalysesRequest
     */
    linkedData?: boolean;
    /**
     * Whether to include results from the local Knowledge Graph, by default true.
     * @type {boolean}
     * @memberof AnalysesRequest
     */
    localData?: boolean;
    /**
     * Whether to include results from connected Knowledge Graphs, by default true.
     * @type {boolean}
     * @memberof AnalysesRequest
     */
    networkData?: boolean;
}

/**
 * Check if a given object implements the AnalysesRequest interface.
 */
export function instanceOfAnalysesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AnalysesRequestFromJSON(json: any): AnalysesRequest {
    return AnalysesRequestFromJSONTyped(json, false);
}

export function AnalysesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalysesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': !exists(json, 'text') ? undefined : json['text'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'query': !exists(json, 'query') ? undefined : json['query'],
        'html': !exists(json, 'html') ? undefined : json['html'],
        'languageCode': !exists(json, 'language_code') ? undefined : json['language_code'],
        'queryLocationName': !exists(json, 'query_location_name') ? undefined : json['query_location_name'],
        'querySearchEngine': !exists(json, 'query_search_engine') ? undefined : json['query_search_engine'],
        'linkedData': !exists(json, 'linked_data') ? undefined : json['linked_data'],
        'localData': !exists(json, 'local_data') ? undefined : json['local_data'],
        'networkData': !exists(json, 'network_data') ? undefined : json['network_data'],
    };
}

export function AnalysesRequestToJSON(value?: AnalysesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': value.text,
        'url': value.url,
        'query': value.query,
        'html': value.html,
        'language_code': value.languageCode,
        'query_location_name': value.queryLocationName,
        'query_search_engine': value.querySearchEngine,
        'linked_data': value.linkedData,
        'local_data': value.localData,
        'network_data': value.networkData,
    };
}

