/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsImportRequest,
} from '../models';
import {
    AnalyticsImportRequestFromJSON,
    AnalyticsImportRequestToJSON,
} from '../models';

export interface CreateAnalyticsImportRequest {
    analyticsImportRequest: AnalyticsImportRequest;
}

/**
 * 
 */
export class AnalyticsImportsApi extends runtime.BaseAPI {

    /**
     * Create a Analytics Import using Google Search Console or Botify depending on the Account configuration.
     * Create
     */
    async createAnalyticsImportRaw(requestParameters: CreateAnalyticsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: string; }>>> {
        if (requestParameters.analyticsImportRequest === null || requestParameters.analyticsImportRequest === undefined) {
            throw new runtime.RequiredError('analyticsImportRequest','Required parameter requestParameters.analyticsImportRequest was null or undefined when calling createAnalyticsImport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/analytics-imports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticsImportRequestToJSON(requestParameters.analyticsImportRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create a Analytics Import using Google Search Console or Botify depending on the Account configuration.
     * Create
     */
    async createAnalyticsImport(requestParameters: CreateAnalyticsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: string; }>> {
        const response = await this.createAnalyticsImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
