/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageWord,
  Word,
  WordRequest,
} from '../models';
import {
    PageWordFromJSON,
    PageWordToJSON,
    WordFromJSON,
    WordToJSON,
    WordRequestFromJSON,
    WordRequestToJSON,
} from '../models';

export interface CreateWordRequest {
    contentGenerationId: number;
    wordRequest: WordRequest;
}

export interface CreateWordsRequest {
    contentGenerationId: number;
    wordRequest?: Array<WordRequest>;
}

export interface CreateWordsFromCSVRequest {
    contentGenerationId: number;
    body: string;
    contentType?: string;
}

export interface DeleteWordRequest {
    contentGenerationId: number;
    id: number;
}

export interface ListWordsRequest {
    contentGenerationId: number;
    theCursor?: string;
    theMaximumNumberOfResults?: number;
}

export interface UpdateWordRequest {
    contentGenerationId: number;
    id: number;
    wordRequest: WordRequest;
}

/**
 * 
 */
export class ContentGenerationWordBiasesApi extends runtime.BaseAPI {

    /**
     * Create
     */
    async createWordRaw(requestParameters: CreateWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Word>> {
        if (requestParameters.contentGenerationId === null || requestParameters.contentGenerationId === undefined) {
            throw new runtime.RequiredError('contentGenerationId','Required parameter requestParameters.contentGenerationId was null or undefined when calling createWord.');
        }

        if (requestParameters.wordRequest === null || requestParameters.wordRequest === undefined) {
            throw new runtime.RequiredError('wordRequest','Required parameter requestParameters.wordRequest was null or undefined when calling createWord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{contentGenerationId}/words`.replace(`{${"contentGenerationId"}}`, encodeURIComponent(String(requestParameters.contentGenerationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WordRequestToJSON(requestParameters.wordRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async createWord(requestParameters: CreateWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Word> {
        const response = await this.createWordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a list of word biases for this prompt. Existing words will be deleted.
     * Update for prompt
     */
    async createWordsRaw(requestParameters: CreateWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Word>>> {
        if (requestParameters.contentGenerationId === null || requestParameters.contentGenerationId === undefined) {
            throw new runtime.RequiredError('contentGenerationId','Required parameter requestParameters.contentGenerationId was null or undefined when calling createWords.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{contentGenerationId}/words`.replace(`{${"contentGenerationId"}}`, encodeURIComponent(String(requestParameters.contentGenerationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wordRequest.map(WordRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WordFromJSON));
    }

    /**
     * Send a list of word biases for this prompt. Existing words will be deleted.
     * Update for prompt
     */
    async createWords(requestParameters: CreateWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Word>> {
        const response = await this.createWordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update from CSV
     */
    async createWordsFromCSVRaw(requestParameters: CreateWordsFromCSVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentGenerationId === null || requestParameters.contentGenerationId === undefined) {
            throw new runtime.RequiredError('contentGenerationId','Required parameter requestParameters.contentGenerationId was null or undefined when calling createWordsFromCSV.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createWordsFromCSV.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/csv';

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['content-type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{contentGenerationId}/words/imports`.replace(`{${"contentGenerationId"}}`, encodeURIComponent(String(requestParameters.contentGenerationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update from CSV
     */
    async createWordsFromCSV(requestParameters: CreateWordsFromCSVRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createWordsFromCSVRaw(requestParameters, initOverrides);
    }

    /**
     * Delete
     */
    async deleteWordRaw(requestParameters: DeleteWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentGenerationId === null || requestParameters.contentGenerationId === undefined) {
            throw new runtime.RequiredError('contentGenerationId','Required parameter requestParameters.contentGenerationId was null or undefined when calling deleteWord.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{contentGenerationId}/words/{id}`.replace(`{${"contentGenerationId"}}`, encodeURIComponent(String(requestParameters.contentGenerationId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete
     */
    async deleteWord(requestParameters: DeleteWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWordRaw(requestParameters, initOverrides);
    }

    /**
     * List
     */
    async listWordsRaw(requestParameters: ListWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageWord>> {
        if (requestParameters.contentGenerationId === null || requestParameters.contentGenerationId === undefined) {
            throw new runtime.RequiredError('contentGenerationId','Required parameter requestParameters.contentGenerationId was null or undefined when calling listWords.');
        }

        const queryParameters: any = {};

        if (requestParameters.theCursor !== undefined) {
            queryParameters['The cursor.'] = requestParameters.theCursor;
        }

        if (requestParameters.theMaximumNumberOfResults !== undefined) {
            queryParameters['The maximum number of results.'] = requestParameters.theMaximumNumberOfResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{contentGenerationId}/words`.replace(`{${"contentGenerationId"}}`, encodeURIComponent(String(requestParameters.contentGenerationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageWordFromJSON(jsonValue));
    }

    /**
     * List
     */
    async listWords(requestParameters: ListWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageWord> {
        const response = await this.listWordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async updateWordRaw(requestParameters: UpdateWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Word>> {
        if (requestParameters.contentGenerationId === null || requestParameters.contentGenerationId === undefined) {
            throw new runtime.RequiredError('contentGenerationId','Required parameter requestParameters.contentGenerationId was null or undefined when calling updateWord.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWord.');
        }

        if (requestParameters.wordRequest === null || requestParameters.wordRequest === undefined) {
            throw new runtime.RequiredError('wordRequest','Required parameter requestParameters.wordRequest was null or undefined when calling updateWord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{contentGenerationId}/words/{id}`.replace(`{${"contentGenerationId"}}`, encodeURIComponent(String(requestParameters.contentGenerationId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WordRequestToJSON(requestParameters.wordRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WordFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async updateWord(requestParameters: UpdateWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Word> {
        const response = await this.updateWordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
