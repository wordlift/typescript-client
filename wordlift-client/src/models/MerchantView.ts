/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An array of objects.
 * @export
 * @interface MerchantView
 */
export interface MerchantView {
    /**
     * The Google merchant access token
     * @type {string}
     * @memberof MerchantView
     */
    accessToken: string;
    /**
     * The account id
     * @type {number}
     * @memberof MerchantView
     */
    readonly accountId?: number;
    /**
     * Whether the Merchant data will be synchronized automatically
     * @type {boolean}
     * @memberof MerchantView
     */
    automaticSynchronization?: boolean;
    /**
     * The create date-time
     * @type {Date}
     * @memberof MerchantView
     */
    readonly createdAt?: Date;
    /**
     * Custom seller entity - if applicable.
     * @type {string}
     * @memberof MerchantView
     */
    customSeller?: string;
    /**
     * The custom domain (for example data.example.org)
     * @type {string}
     * @memberof MerchantView
     * @deprecated
     */
    datasetDomain?: string;
    /**
     * The dataset path (for example /data)
     * @type {string}
     * @memberof MerchantView
     * @deprecated
     */
    datasetName?: string;
    /**
     * Default Products filter action to apply during sync process.
     * @type {string}
     * @memberof MerchantView
     */
    defaultProductsFilterAction: MerchantViewDefaultProductsFilterActionEnum;
    /**
     * True if the merchant has been deleted
     * @type {boolean}
     * @memberof MerchantView
     */
    deleted: boolean;
    /**
     * The delete date-time
     * @type {Date}
     * @memberof MerchantView
     */
    readonly deletedAt?: Date;
    /**
     * The Google Merchant id
     * @type {number}
     * @memberof MerchantView
     */
    googleMerchantId: number;
    /**
     * The unique id
     * @type {number}
     * @memberof MerchantView
     */
    readonly id?: number;
    /**
     * Whether to ignore the `brand` property during validation
     * @type {boolean}
     * @memberof MerchantView
     */
    ignoreBrand?: boolean;
    /**
     * Whether to ignore the `image` property during validation
     * @type {boolean}
     * @memberof MerchantView
     */
    ignoreImage?: boolean;
    /**
     * The last modified date-time
     * @type {Date}
     * @memberof MerchantView
     */
    readonly modifiedAt?: Date;
    /**
     * The publisher name (shows in schema publisher)
     * @type {string}
     * @memberof MerchantView
     */
    publisherName: string;
    /**
     * The Google merchant refresh token
     * @type {string}
     * @memberof MerchantView
     */
    refreshToken: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantView
     */
    sid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantView
     */
    syncHasErrors?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsCreated?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsDeleted?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsErrored?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsSkipped?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsUnchanged?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsUpdated?: number;
    /**
     * The started date-time.
     * @type {Date}
     * @memberof MerchantView
     */
    readonly syncStartedAt?: Date;
    /**
     * The stopped date-time.
     * @type {Date}
     * @memberof MerchantView
     */
    readonly syncStoppedAt?: Date;
    /**
     * The website URL
     * @type {string}
     * @memberof MerchantView
     */
    url?: string;
    /**
     * Which strategy to use to write the url schema.
     * @type {string}
     * @memberof MerchantView
     */
    urlStrategy?: MerchantViewUrlStrategyEnum;
    /**
     * How to write the merchant data to the graph, if unsure, do not set anything (by default `wordpressMerchantWriter`).
     * @type {string}
     * @memberof MerchantView
     */
    writerService?: string;
}


/**
 * @export
 */
export const MerchantViewDefaultProductsFilterActionEnum = {
    Process: 'PROCESS',
    Ignore: 'IGNORE'
} as const;
export type MerchantViewDefaultProductsFilterActionEnum = typeof MerchantViewDefaultProductsFilterActionEnum[keyof typeof MerchantViewDefaultProductsFilterActionEnum];

/**
 * @export
 */
export const MerchantViewUrlStrategyEnum = {
    CanonicalLinkAndLink: 'canonicalLinkAndLink',
    CanonicalLinkOtherwiseLink: 'canonicalLinkOtherwiseLink'
} as const;
export type MerchantViewUrlStrategyEnum = typeof MerchantViewUrlStrategyEnum[keyof typeof MerchantViewUrlStrategyEnum];


/**
 * Check if a given object implements the MerchantView interface.
 */
export function instanceOfMerchantView(value: object): value is MerchantView {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('defaultProductsFilterAction' in value) || value['defaultProductsFilterAction'] === undefined) return false;
    if (!('deleted' in value) || value['deleted'] === undefined) return false;
    if (!('googleMerchantId' in value) || value['googleMerchantId'] === undefined) return false;
    if (!('publisherName' in value) || value['publisherName'] === undefined) return false;
    if (!('refreshToken' in value) || value['refreshToken'] === undefined) return false;
    return true;
}

export function MerchantViewFromJSON(json: any): MerchantView {
    return MerchantViewFromJSONTyped(json, false);
}

export function MerchantViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerchantView {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'accountId': json['account_id'] == null ? undefined : json['account_id'],
        'automaticSynchronization': json['automatic_synchronization'] == null ? undefined : json['automatic_synchronization'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'customSeller': json['custom_seller'] == null ? undefined : json['custom_seller'],
        'datasetDomain': json['dataset_domain'] == null ? undefined : json['dataset_domain'],
        'datasetName': json['dataset_name'] == null ? undefined : json['dataset_name'],
        'defaultProductsFilterAction': json['default_products_filter_action'],
        'deleted': json['deleted'],
        'deletedAt': json['deleted_at'] == null ? undefined : (new Date(json['deleted_at'])),
        'googleMerchantId': json['google_merchant_id'],
        'id': json['id'] == null ? undefined : json['id'],
        'ignoreBrand': json['ignore_brand'] == null ? undefined : json['ignore_brand'],
        'ignoreImage': json['ignore_image'] == null ? undefined : json['ignore_image'],
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'publisherName': json['publisher_name'],
        'refreshToken': json['refresh_token'],
        'sid': json['sid'] == null ? undefined : json['sid'],
        'syncHasErrors': json['sync_has_errors'] == null ? undefined : json['sync_has_errors'],
        'syncId': json['sync_id'] == null ? undefined : json['sync_id'],
        'syncProductsCreated': json['sync_products_created'] == null ? undefined : json['sync_products_created'],
        'syncProductsDeleted': json['sync_products_deleted'] == null ? undefined : json['sync_products_deleted'],
        'syncProductsErrored': json['sync_products_errored'] == null ? undefined : json['sync_products_errored'],
        'syncProductsSkipped': json['sync_products_skipped'] == null ? undefined : json['sync_products_skipped'],
        'syncProductsTotal': json['sync_products_total'] == null ? undefined : json['sync_products_total'],
        'syncProductsUnchanged': json['sync_products_unchanged'] == null ? undefined : json['sync_products_unchanged'],
        'syncProductsUpdated': json['sync_products_updated'] == null ? undefined : json['sync_products_updated'],
        'syncStartedAt': json['sync_started_at'] == null ? undefined : (new Date(json['sync_started_at'])),
        'syncStoppedAt': json['sync_stopped_at'] == null ? undefined : (new Date(json['sync_stopped_at'])),
        'url': json['url'] == null ? undefined : json['url'],
        'urlStrategy': json['url_strategy'] == null ? undefined : json['url_strategy'],
        'writerService': json['writer_service'] == null ? undefined : json['writer_service'],
    };
}

export function MerchantViewToJSON(json: any): MerchantView {
    return MerchantViewToJSONTyped(json, false);
}

export function MerchantViewToJSONTyped(value?: Omit<MerchantView, 'account_id'|'created_at'|'deleted_at'|'id'|'modified_at'|'sync_started_at'|'sync_stopped_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_token': value['accessToken'],
        'automatic_synchronization': value['automaticSynchronization'],
        'custom_seller': value['customSeller'],
        'dataset_domain': value['datasetDomain'],
        'dataset_name': value['datasetName'],
        'default_products_filter_action': value['defaultProductsFilterAction'],
        'deleted': value['deleted'],
        'google_merchant_id': value['googleMerchantId'],
        'ignore_brand': value['ignoreBrand'],
        'ignore_image': value['ignoreImage'],
        'publisher_name': value['publisherName'],
        'refresh_token': value['refreshToken'],
        'sid': value['sid'],
        'sync_has_errors': value['syncHasErrors'],
        'sync_id': value['syncId'],
        'sync_products_created': value['syncProductsCreated'],
        'sync_products_deleted': value['syncProductsDeleted'],
        'sync_products_errored': value['syncProductsErrored'],
        'sync_products_skipped': value['syncProductsSkipped'],
        'sync_products_total': value['syncProductsTotal'],
        'sync_products_unchanged': value['syncProductsUnchanged'],
        'sync_products_updated': value['syncProductsUpdated'],
        'url': value['url'],
        'url_strategy': value['urlStrategy'],
        'writer_service': value['writerService'],
    };
}

