/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutocompleteResult
 */
export interface AutocompleteResult {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    labels?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    descriptions?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    types?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    urls?: Array<string>;
    /**
     * A list of image URLs.
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    images?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    sameAss?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    scope?: AutocompleteResultScopeEnum;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    description?: string;
    /**
     * Schema type slug
     * @type {string}
     * @memberof AutocompleteResult
     */
    mainType?: string;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    displayTypes?: string;
}


/**
 * @export
 */
export const AutocompleteResultScopeEnum = {
    Local: 'local',
    Network: 'network',
    Cloud: 'cloud'
} as const;
export type AutocompleteResultScopeEnum = typeof AutocompleteResultScopeEnum[keyof typeof AutocompleteResultScopeEnum];


/**
 * Check if a given object implements the AutocompleteResult interface.
 */
export function instanceOfAutocompleteResult(value: object): value is AutocompleteResult {
    return true;
}

export function AutocompleteResultFromJSON(json: any): AutocompleteResult {
    return AutocompleteResultFromJSONTyped(json, false);
}

export function AutocompleteResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutocompleteResult {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'descriptions': json['descriptions'] == null ? undefined : json['descriptions'],
        'types': json['types'] == null ? undefined : json['types'],
        'urls': json['urls'] == null ? undefined : json['urls'],
        'images': json['images'] == null ? undefined : json['images'],
        'sameAss': json['sameAss'] == null ? undefined : json['sameAss'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'description': json['description'] == null ? undefined : json['description'],
        'mainType': json['mainType'] == null ? undefined : json['mainType'],
        'label': json['label'] == null ? undefined : json['label'],
        'value': json['value'] == null ? undefined : json['value'],
        'displayTypes': json['displayTypes'] == null ? undefined : json['displayTypes'],
    };
}

export function AutocompleteResultToJSON(json: any): AutocompleteResult {
    return AutocompleteResultToJSONTyped(json, false);
}

export function AutocompleteResultToJSONTyped(value?: AutocompleteResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'labels': value['labels'],
        'descriptions': value['descriptions'],
        'types': value['types'],
        'urls': value['urls'],
        'images': value['images'],
        'sameAss': value['sameAss'],
        'scope': value['scope'],
        'description': value['description'],
        'mainType': value['mainType'],
        'label': value['label'],
        'value': value['value'],
        'displayTypes': value['displayTypes'],
    };
}

