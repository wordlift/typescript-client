/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Field,
  PageField,
} from '../models/index';
import {
    FieldFromJSON,
    FieldToJSON,
    PageFieldFromJSON,
    PageFieldToJSON,
} from '../models/index';

export interface ListFieldsRequest {
    contentGenerationId: number;
    cursor?: string;
    limit?: number;
}

export interface ListFieldsForGraphQlQueryRequest {
    body: string;
}

/**
 * 
 */
export class ContentGenerationFieldsApi extends runtime.BaseAPI {

    /**
     * List
     */
    async listFieldsRaw(requestParameters: ListFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageField>> {
        if (requestParameters['contentGenerationId'] == null) {
            throw new runtime.RequiredError(
                'contentGenerationId',
                'Required parameter "contentGenerationId" was null or undefined when calling listFields().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/content-generations/{contentGenerationId}/fields`.replace(`{${"contentGenerationId"}}`, encodeURIComponent(String(requestParameters['contentGenerationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFieldFromJSON(jsonValue));
    }

    /**
     * List
     */
    async listFields(requestParameters: ListFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageField> {
        const response = await this.listFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List for GraphQl Query
     */
    async listFieldsForGraphQlQueryRaw(requestParameters: ListFieldsForGraphQlQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Field>>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling listFieldsForGraphQlQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/graphql';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FieldFromJSON));
    }

    /**
     * List for GraphQl Query
     */
    async listFieldsForGraphQlQuery(requestParameters: ListFieldsForGraphQlQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Field>> {
        const response = await this.listFieldsForGraphQlQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
