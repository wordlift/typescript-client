/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Authorization,
  BuildAuthorizeUriRequest,
  BuildAuthorizeUriResponse,
  DuplicateAuthorizationRequest,
  ExchangeAuthCodeRequest,
  ExchangeAuthCodeResponse,
} from '../models';
import {
    AuthorizationFromJSON,
    AuthorizationToJSON,
    BuildAuthorizeUriRequestFromJSON,
    BuildAuthorizeUriRequestToJSON,
    BuildAuthorizeUriResponseFromJSON,
    BuildAuthorizeUriResponseToJSON,
    DuplicateAuthorizationRequestFromJSON,
    DuplicateAuthorizationRequestToJSON,
    ExchangeAuthCodeRequestFromJSON,
    ExchangeAuthCodeRequestToJSON,
    ExchangeAuthCodeResponseFromJSON,
    ExchangeAuthCodeResponseToJSON,
} from '../models';

export interface CreateAuthCodeExchangeRequest {
    exchangeAuthCodeRequest: ExchangeAuthCodeRequest;
}

export interface CreateAuthorizeUriRequest {
    buildAuthorizeUriRequest: BuildAuthorizeUriRequest;
}

export interface DuplicateRequest {
    duplicateAuthorizationRequest: DuplicateAuthorizationRequest;
}

export interface GetAuthorizationsRequest {
    accountKey?: Array<string>;
}

export interface LoginRequest {
    accountKey: string;
    redirectUri: string;
    state?: string;
}

/**
 * 
 */
export class GoogleSearchConsoleOAuth2Api extends runtime.BaseAPI {

    /**
     * Call this API to have the Platform receive an Authentication Token to access the Analytics data via Google Search Console.
     * Get an Access Code
     */
    async createAuthCodeExchangeRaw(requestParameters: CreateAuthCodeExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeAuthCodeResponse>> {
        if (requestParameters.exchangeAuthCodeRequest === null || requestParameters.exchangeAuthCodeRequest === undefined) {
            throw new runtime.RequiredError('exchangeAuthCodeRequest','Required parameter requestParameters.exchangeAuthCodeRequest was null or undefined when calling createAuthCodeExchange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/google-search-console/oauth2/auth-code-exchanges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeAuthCodeRequestToJSON(requestParameters.exchangeAuthCodeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeAuthCodeResponseFromJSON(jsonValue));
    }

    /**
     * Call this API to have the Platform receive an Authentication Token to access the Analytics data via Google Search Console.
     * Get an Access Code
     */
    async createAuthCodeExchange(requestParameters: CreateAuthCodeExchangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeAuthCodeResponse> {
        const response = await this.createAuthCodeExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call this API to get an authorization URI needed to interactively get an authorization token. Then call the `exchangeAuthCode` to exchange it with an authorization token.
     * Create an Authorization URI
     */
    async createAuthorizeUriRaw(requestParameters: CreateAuthorizeUriRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BuildAuthorizeUriResponse>> {
        if (requestParameters.buildAuthorizeUriRequest === null || requestParameters.buildAuthorizeUriRequest === undefined) {
            throw new runtime.RequiredError('buildAuthorizeUriRequest','Required parameter requestParameters.buildAuthorizeUriRequest was null or undefined when calling createAuthorizeUri.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/google-search-console/oauth2/authorize-uris`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BuildAuthorizeUriRequestToJSON(requestParameters.buildAuthorizeUriRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BuildAuthorizeUriResponseFromJSON(jsonValue));
    }

    /**
     * Call this API to get an authorization URI needed to interactively get an authorization token. Then call the `exchangeAuthCode` to exchange it with an authorization token.
     * Create an Authorization URI
     */
    async createAuthorizeUri(requestParameters: CreateAuthorizeUriRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BuildAuthorizeUriResponse> {
        const response = await this.createAuthorizeUriRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the authorizations of the authenticated user.
     * Delete an authorization
     */
    async deleteAuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/google-search-console/authorization`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve the authorizations of the authenticated user.
     * Delete an authorization
     */
    async deleteAuthorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAuthorizationRaw(initOverrides);
    }

    /**
     * Call this API to duplicate an existing google search console connection to another accounts.
     * Duplicate the Google Search Console connection through accounts
     */
    async duplicateRaw(requestParameters: DuplicateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.duplicateAuthorizationRequest === null || requestParameters.duplicateAuthorizationRequest === undefined) {
            throw new runtime.RequiredError('duplicateAuthorizationRequest','Required parameter requestParameters.duplicateAuthorizationRequest was null or undefined when calling duplicate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/google-search-console/authorize/duplicate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DuplicateAuthorizationRequestToJSON(requestParameters.duplicateAuthorizationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Call this API to duplicate an existing google search console connection to another accounts.
     * Duplicate the Google Search Console connection through accounts
     */
    async duplicate(requestParameters: DuplicateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.duplicateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the authorizations of the authenticated user.
     * Get the authorizations
     */
    async getAuthorizationsRaw(requestParameters: GetAuthorizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Authorization>>> {
        const queryParameters: any = {};

        if (requestParameters.accountKey) {
            queryParameters['account_key'] = requestParameters.accountKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/google-search-console/authorizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AuthorizationFromJSON));
    }

    /**
     * Retrieve the authorizations of the authenticated user.
     * Get the authorizations
     */
    async getAuthorizations(requestParameters: GetAuthorizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Authorization>> {
        const response = await this.getAuthorizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call this API to go to the login page of the Google Search Console.
     * Login to the Google Search Console API client
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountKey === null || requestParameters.accountKey === undefined) {
            throw new runtime.RequiredError('accountKey','Required parameter requestParameters.accountKey was null or undefined when calling login.');
        }

        if (requestParameters.redirectUri === null || requestParameters.redirectUri === undefined) {
            throw new runtime.RequiredError('redirectUri','Required parameter requestParameters.redirectUri was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        if (requestParameters.accountKey !== undefined) {
            queryParameters['accountKey'] = requestParameters.accountKey;
        }

        if (requestParameters.redirectUri !== undefined) {
            queryParameters['redirectUri'] = requestParameters.redirectUri;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/google-search-console/authorize/init`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Call this API to go to the login page of the Google Search Console.
     * Login to the Google Search Console API client
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginRaw(requestParameters, initOverrides);
    }

}
