/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Annotation } from './Annotation';
import {
    AnnotationFromJSON,
    AnnotationFromJSONTyped,
    AnnotationToJSON,
} from './Annotation';
import type { Entity } from './Entity';
import {
    EntityFromJSON,
    EntityFromJSONTyped,
    EntityToJSON,
} from './Entity';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
} from './Image';
import type { Topic } from './Topic';
import {
    TopicFromJSON,
    TopicFromJSONTyped,
    TopicToJSON,
} from './Topic';

/**
 * Response
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * A map of entity URI to the respective entity.
     * @type {{ [key: string]: Entity; }}
     * @memberof Response
     */
    entities?: { [key: string]: Entity; };
    /**
     * A map of annotation id to the respective annotation.
     * @type {{ [key: string]: Annotation; }}
     * @memberof Response
     */
    annotations?: { [key: string]: Annotation; };
    /**
     * A list of images.
     * @type {Array<Image>}
     * @memberof Response
     */
    images?: Array<Image>;
    /**
     * A list of languages.
     * @type {Array<string>}
     * @memberof Response
     */
    languages?: Array<string>;
    /**
     * A list of topics.
     * @type {Array<Topic>}
     * @memberof Response
     */
    topics?: Array<Topic>;
    /**
     * The text supplied for analysis.
     * @type {string}
     * @memberof Response
     */
    content?: string;
}

/**
 * Check if a given object implements the Response interface.
 */
export function instanceOfResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResponseFromJSON(json: any): Response {
    return ResponseFromJSONTyped(json, false);
}

export function ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entities': !exists(json, 'entities') ? undefined : (mapValues(json['entities'], EntityFromJSON)),
        'annotations': !exists(json, 'annotations') ? undefined : (mapValues(json['annotations'], AnnotationFromJSON)),
        'images': !exists(json, 'images') ? undefined : ((json['images'] as Array<any>).map(ImageFromJSON)),
        'languages': !exists(json, 'languages') ? undefined : json['languages'],
        'topics': !exists(json, 'topics') ? undefined : ((json['topics'] as Array<any>).map(TopicFromJSON)),
        'content': !exists(json, 'content') ? undefined : json['content'],
    };
}

export function ResponseToJSON(value?: Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entities': value.entities === undefined ? undefined : (mapValues(value.entities, EntityToJSON)),
        'annotations': value.annotations === undefined ? undefined : (mapValues(value.annotations, AnnotationToJSON)),
        'images': value.images === undefined ? undefined : ((value.images as Array<any>).map(ImageToJSON)),
        'languages': value.languages,
        'topics': value.topics === undefined ? undefined : ((value.topics as Array<any>).map(TopicToJSON)),
        'content': value.content,
    };
}

