/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The Merchant request
 * @export
 * @interface MerchantRequest
 */
export interface MerchantRequest {
    /**
     * Google Merchant access token
     * @type {string}
     * @memberof MerchantRequest
     */
    accessToken?: string;
    /**
     * The Knowledge Graph to use for the Merchant. Please note that the Knowledge Graph will be reset. When not provided, this method will use the first available Knowledge Graph.
     * @type {number}
     * @memberof MerchantRequest
     */
    accountId?: number;
    /**
     * The custom domain (for example data.example.org)
     * @type {string}
     * @memberof MerchantRequest
     */
    datasetDomain?: string;
    /**
     * The dataset path (for example "data")
     * @type {string}
     * @memberof MerchantRequest
     */
    datasetName?: string;
    /**
     * True if the merchant has been deleted
     * @type {boolean}
     * @memberof MerchantRequest
     */
    deleted?: boolean;
    /**
     * The Google Merchant id
     * @type {number}
     * @memberof MerchantRequest
     */
    googleMerchantId: number;
    /**
     * Whether to ignore the `brand` property during validation
     * @type {boolean}
     * @memberof MerchantRequest
     */
    ignoreBrand?: boolean;
    /**
     * Whether to ignore the `image` property during validation
     * @type {boolean}
     * @memberof MerchantRequest
     */
    ignoreImage?: boolean;
    /**
     * The publisher name (shows in schema publisher)
     * @type {string}
     * @memberof MerchantRequest
     */
    publisherName: string;
    /**
     * Google Merchant refresh token
     * @type {string}
     * @memberof MerchantRequest
     */
    refreshToken: string;
    /**
     * The website URL
     * @type {string}
     * @memberof MerchantRequest
     */
    url: string;
    /**
     * Which strategy to use to write the url schema.
     * @type {string}
     * @memberof MerchantRequest
     */
    urlStrategy?: MerchantRequestUrlStrategyEnum;
    /**
     * How to write the merchant data to the graph, if unsure, do not set anything (by default `wordpressMerchantWriter`).
     * @type {string}
     * @memberof MerchantRequest
     */
    writerService?: string;
}


/**
 * @export
 */
export const MerchantRequestUrlStrategyEnum = {
    CanonicalLinkAndLink: 'canonicalLinkAndLink',
    CanonicalLinkOtherwiseLink: 'canonicalLinkOtherwiseLink'
} as const;
export type MerchantRequestUrlStrategyEnum = typeof MerchantRequestUrlStrategyEnum[keyof typeof MerchantRequestUrlStrategyEnum];


/**
 * Check if a given object implements the MerchantRequest interface.
 */
export function instanceOfMerchantRequest(value: object): value is MerchantRequest {
    if (!('googleMerchantId' in value) || value['googleMerchantId'] === undefined) return false;
    if (!('publisherName' in value) || value['publisherName'] === undefined) return false;
    if (!('refreshToken' in value) || value['refreshToken'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    return true;
}

export function MerchantRequestFromJSON(json: any): MerchantRequest {
    return MerchantRequestFromJSONTyped(json, false);
}

export function MerchantRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerchantRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'] == null ? undefined : json['access_token'],
        'accountId': json['account_id'] == null ? undefined : json['account_id'],
        'datasetDomain': json['dataset_domain'] == null ? undefined : json['dataset_domain'],
        'datasetName': json['dataset_name'] == null ? undefined : json['dataset_name'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'googleMerchantId': json['google_merchant_id'],
        'ignoreBrand': json['ignore_brand'] == null ? undefined : json['ignore_brand'],
        'ignoreImage': json['ignore_image'] == null ? undefined : json['ignore_image'],
        'publisherName': json['publisher_name'],
        'refreshToken': json['refresh_token'],
        'url': json['url'],
        'urlStrategy': json['url_strategy'] == null ? undefined : json['url_strategy'],
        'writerService': json['writer_service'] == null ? undefined : json['writer_service'],
    };
}

export function MerchantRequestToJSON(json: any): MerchantRequest {
    return MerchantRequestToJSONTyped(json, false);
}

export function MerchantRequestToJSONTyped(value?: MerchantRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_token': value['accessToken'],
        'account_id': value['accountId'],
        'dataset_domain': value['datasetDomain'],
        'dataset_name': value['datasetName'],
        'deleted': value['deleted'],
        'google_merchant_id': value['googleMerchantId'],
        'ignore_brand': value['ignoreBrand'],
        'ignore_image': value['ignoreImage'],
        'publisher_name': value['publisherName'],
        'refresh_token': value['refreshToken'],
        'url': value['url'],
        'url_strategy': value['urlStrategy'],
        'writer_service': value['writerService'],
    };
}

