/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The Content Generation request.
 * @export
 * @interface ContentGenerationRequest
 */
export interface ContentGenerationRequest {
    /**
     * The account id bound to this content generation.
     * @type {number}
     * @memberof ContentGenerationRequest
     */
    accountId: number;
    /**
     * The deleted flag.
     * @type {boolean}
     * @memberof ContentGenerationRequest
     */
    deleted?: boolean;
    /**
     * The GraphQL query which will be used to import entity data from the Knowledge Graph.
     * @type {string}
     * @memberof ContentGenerationRequest
     */
    graphqlQuery: string;
    /**
     * The maximum number of tokens.
     * @type {number}
     * @memberof ContentGenerationRequest
     */
    maxTokens?: number;
    /**
     * Minimum amount of words per completion.
     * @type {number}
     * @memberof ContentGenerationRequest
     */
    minWords?: number;
    /**
     * The model ID.
     * @type {number}
     * @memberof ContentGenerationRequest
     */
    modelId?: number;
    /**
     * The model name.
     * @type {string}
     * @memberof ContentGenerationRequest
     */
    name: string;
    /**
     * The penalty score.
     * @type {number}
     * @memberof ContentGenerationRequest
     */
    penalty?: number;
    /**
     * The prompt template.
     * @type {string}
     * @memberof ContentGenerationRequest
     */
    promptTemplate?: string;
    /**
     * The stop sequence.
     * @type {string}
     * @memberof ContentGenerationRequest
     */
    stop?: string;
    /**
     * The temperature score.
     * @type {number}
     * @memberof ContentGenerationRequest
     */
    temperature?: number;
    /**
     * Words to ignore when checking for words not in prompt.
     * @type {Set<string>}
     * @memberof ContentGenerationRequest
     */
    wordsToIgnore?: Set<string>;
}

/**
 * Check if a given object implements the ContentGenerationRequest interface.
 */
export function instanceOfContentGenerationRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "graphqlQuery" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function ContentGenerationRequestFromJSON(json: any): ContentGenerationRequest {
    return ContentGenerationRequestFromJSONTyped(json, false);
}

export function ContentGenerationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentGenerationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': json['account_id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'graphqlQuery': json['graphql_query'],
        'maxTokens': !exists(json, 'max_tokens') ? undefined : json['max_tokens'],
        'minWords': !exists(json, 'min_words') ? undefined : json['min_words'],
        'modelId': !exists(json, 'model_id') ? undefined : json['model_id'],
        'name': json['name'],
        'penalty': !exists(json, 'penalty') ? undefined : json['penalty'],
        'promptTemplate': !exists(json, 'prompt_template') ? undefined : json['prompt_template'],
        'stop': !exists(json, 'stop') ? undefined : json['stop'],
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'wordsToIgnore': !exists(json, 'words_to_ignore') ? undefined : json['words_to_ignore'],
    };
}

export function ContentGenerationRequestToJSON(value?: ContentGenerationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account_id': value.accountId,
        'deleted': value.deleted,
        'graphql_query': value.graphqlQuery,
        'max_tokens': value.maxTokens,
        'min_words': value.minWords,
        'model_id': value.modelId,
        'name': value.name,
        'penalty': value.penalty,
        'prompt_template': value.promptTemplate,
        'stop': value.stop,
        'temperature': value.temperature,
        'words_to_ignore': value.wordsToIgnore === undefined ? undefined : Array.from(value.wordsToIgnore as Set<any>),
    };
}

