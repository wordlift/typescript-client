/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A Content Generation project.
 * @export
 * @interface ContentGeneration
 */
export interface ContentGeneration {
    /**
     * The Account id bound to this Content Generation.
     * @type {number}
     * @memberof ContentGeneration
     */
    accountId: number;
    /**
     * The create date-time.
     * @type {Date}
     * @memberof ContentGeneration
     */
    readonly createdAt?: Date;
    /**
     * True if the project has been deleted.
     * @type {boolean}
     * @memberof ContentGeneration
     */
    deleted: boolean;
    /**
     * The delete date-time.
     * @type {Date}
     * @memberof ContentGeneration
     */
    readonly deletedAt?: Date;
    /**
     * The GraphQL query which will be used to import entity data from the Knowledge Graph.
     * @type {string}
     * @memberof ContentGeneration
     */
    graphqlQuery: string;
    /**
     * The unique id.
     * @type {number}
     * @memberof ContentGeneration
     */
    readonly id?: number;
    /**
     * The maximum number of tokens.
     * @type {number}
     * @memberof ContentGeneration
     */
    maxTokens?: number;
    /**
     * Minimum amount of words per completion
     * @type {number}
     * @memberof ContentGeneration
     */
    minWords?: number;
    /**
     * The model ID.
     * @type {number}
     * @memberof ContentGeneration
     */
    modelId?: number;
    /**
     * The last modified date-time.
     * @type {Date}
     * @memberof ContentGeneration
     */
    readonly modifiedAt?: Date;
    /**
     * The name.
     * @type {string}
     * @memberof ContentGeneration
     */
    name: string;
    /**
     * The penalty score.
     * @type {number}
     * @memberof ContentGeneration
     */
    penalty?: number;
    /**
     * The prompt template.
     * @type {string}
     * @memberof ContentGeneration
     */
    promptTemplate?: string;
    /**
     * The stop sequence.
     * @type {string}
     * @memberof ContentGeneration
     */
    stop?: string;
    /**
     * The temperature score.
     * @type {number}
     * @memberof ContentGeneration
     */
    temperature?: number;
    /**
     * Words to ignore when checking for words not in prompt.
     * @type {Set<string>}
     * @memberof ContentGeneration
     */
    wordsToIgnore?: Set<string>;
}

/**
 * Check if a given object implements the ContentGeneration interface.
 */
export function instanceOfContentGeneration(value: object): value is ContentGeneration {
    if (!('accountId' in value) || value['accountId'] === undefined) return false;
    if (!('deleted' in value) || value['deleted'] === undefined) return false;
    if (!('graphqlQuery' in value) || value['graphqlQuery'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ContentGenerationFromJSON(json: any): ContentGeneration {
    return ContentGenerationFromJSONTyped(json, false);
}

export function ContentGenerationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentGeneration {
    if (json == null) {
        return json;
    }
    return {
        
        'accountId': json['account_id'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'deleted': json['deleted'],
        'deletedAt': json['deleted_at'] == null ? undefined : (new Date(json['deleted_at'])),
        'graphqlQuery': json['graphql_query'],
        'id': json['id'] == null ? undefined : json['id'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'minWords': json['min_words'] == null ? undefined : json['min_words'],
        'modelId': json['model_id'] == null ? undefined : json['model_id'],
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'name': json['name'],
        'penalty': json['penalty'] == null ? undefined : json['penalty'],
        'promptTemplate': json['prompt_template'] == null ? undefined : json['prompt_template'],
        'stop': json['stop'] == null ? undefined : json['stop'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'wordsToIgnore': json['words_to_ignore'] == null ? undefined : new Set(json['words_to_ignore']),
    };
}

export function ContentGenerationToJSON(json: any): ContentGeneration {
    return ContentGenerationToJSONTyped(json, false);
}

export function ContentGenerationToJSONTyped(value?: Omit<ContentGeneration, 'created_at'|'deleted_at'|'id'|'modified_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'account_id': value['accountId'],
        'deleted': value['deleted'],
        'graphql_query': value['graphqlQuery'],
        'max_tokens': value['maxTokens'],
        'min_words': value['minWords'],
        'model_id': value['modelId'],
        'name': value['name'],
        'penalty': value['penalty'],
        'prompt_template': value['promptTemplate'],
        'stop': value['stop'],
        'temperature': value['temperature'],
        'words_to_ignore': value['wordsToIgnore'] == null ? undefined : Array.from(value['wordsToIgnore'] as Set<any>),
    };
}

