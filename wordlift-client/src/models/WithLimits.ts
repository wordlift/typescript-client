/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An array of objects.
 * @export
 * @interface WithLimits
 */
export interface WithLimits {
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    accountLimits?: number;
    /**
     * 
     * @type {string}
     * @memberof WithLimits
     */
    appliesTo: string;
    /**
     * 
     * @type {boolean}
     * @memberof WithLimits
     */
    block?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    consumption?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    limits?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    referenceId?: number;
    /**
     * 
     * @type {string}
     * @memberof WithLimits
     */
    referenceType?: WithLimitsReferenceTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    remaining?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    resetsInSeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    subscriptionLimits?: number;
}


/**
 * @export
 */
export const WithLimitsReferenceTypeEnum = {
    Subscription: 'SUBSCRIPTION',
    Account: 'ACCOUNT'
} as const;
export type WithLimitsReferenceTypeEnum = typeof WithLimitsReferenceTypeEnum[keyof typeof WithLimitsReferenceTypeEnum];


/**
 * Check if a given object implements the WithLimits interface.
 */
export function instanceOfWithLimits(value: object): value is WithLimits {
    if (!('appliesTo' in value) || value['appliesTo'] === undefined) return false;
    return true;
}

export function WithLimitsFromJSON(json: any): WithLimits {
    return WithLimitsFromJSONTyped(json, false);
}

export function WithLimitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WithLimits {
    if (json == null) {
        return json;
    }
    return {
        
        'accountLimits': json['account_limits'] == null ? undefined : json['account_limits'],
        'appliesTo': json['applies_to'],
        'block': json['block'] == null ? undefined : json['block'],
        'consumption': json['consumption'] == null ? undefined : json['consumption'],
        'id': json['id'] == null ? undefined : json['id'],
        'limits': json['limits'] == null ? undefined : json['limits'],
        'referenceId': json['reference_id'] == null ? undefined : json['reference_id'],
        'referenceType': json['reference_type'] == null ? undefined : json['reference_type'],
        'remaining': json['remaining'] == null ? undefined : json['remaining'],
        'resetsInSeconds': json['resets_in_seconds'] == null ? undefined : json['resets_in_seconds'],
        'subscriptionLimits': json['subscription_limits'] == null ? undefined : json['subscription_limits'],
    };
}

export function WithLimitsToJSON(json: any): WithLimits {
    return WithLimitsToJSONTyped(json, false);
}

export function WithLimitsToJSONTyped(value?: WithLimits | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'account_limits': value['accountLimits'],
        'applies_to': value['appliesTo'],
        'block': value['block'],
        'consumption': value['consumption'],
        'id': value['id'],
        'limits': value['limits'],
        'reference_id': value['referenceId'],
        'reference_type': value['referenceType'],
        'remaining': value['remaining'],
        'resets_in_seconds': value['resetsInSeconds'],
        'subscription_limits': value['subscriptionLimits'],
    };
}

