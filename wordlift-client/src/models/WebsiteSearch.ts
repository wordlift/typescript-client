/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Search Data
 * @export
 * @interface WebsiteSearch
 */
export interface WebsiteSearch {
    /**
     * Number of clicks.
     * @type {number}
     * @memberof WebsiteSearch
     */
    clicks: number;
    /**
     * CTR.
     * @type {number}
     * @memberof WebsiteSearch
     */
    ctr: number;
    /**
     * The id: it's now a unique id, but a row index.
     * @type {number}
     * @memberof WebsiteSearch
     */
    id: number;
    /**
     * Number of impressions.
     * @type {number}
     * @memberof WebsiteSearch
     */
    impressions: number;
    /**
     * The keys for the current data, matching the provided `dimensions` in the query.
     * @type {Array<string>}
     * @memberof WebsiteSearch
     */
    keys: Array<string>;
    /**
     * Position.
     * @type {number}
     * @memberof WebsiteSearch
     */
    position: number;
    /**
     * A score to spot traffic opportunities, from 0.0 to 1.0 (the higher the better). The score is based on the traffic data.
     * @type {number}
     * @memberof WebsiteSearch
     */
    score: number;
}

/**
 * Check if a given object implements the WebsiteSearch interface.
 */
export function instanceOfWebsiteSearch(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "clicks" in value;
    isInstance = isInstance && "ctr" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "impressions" in value;
    isInstance = isInstance && "keys" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "score" in value;

    return isInstance;
}

export function WebsiteSearchFromJSON(json: any): WebsiteSearch {
    return WebsiteSearchFromJSONTyped(json, false);
}

export function WebsiteSearchFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebsiteSearch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'clicks': json['clicks'],
        'ctr': json['ctr'],
        'id': json['id'],
        'impressions': json['impressions'],
        'keys': json['keys'],
        'position': json['position'],
        'score': json['score'],
    };
}

export function WebsiteSearchToJSON(value?: WebsiteSearch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'clicks': value.clicks,
        'ctr': value.ctr,
        'id': value.id,
        'impressions': value.impressions,
        'keys': value.keys,
        'position': value.position,
        'score': value.score,
    };
}

