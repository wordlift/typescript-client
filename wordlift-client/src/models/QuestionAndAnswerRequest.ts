/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WebpageProperties } from './WebpageProperties';
import {
    WebpagePropertiesFromJSON,
    WebpagePropertiesFromJSONTyped,
    WebpagePropertiesToJSON,
} from './WebpageProperties';

/**
 * 
 * @export
 * @interface QuestionAndAnswerRequest
 */
export interface QuestionAndAnswerRequest {
    /**
     * 
     * @type {number}
     * @memberof QuestionAndAnswerRequest
     */
    smartContentId?: number;
    /**
     * 
     * @type {WebpageProperties}
     * @memberof QuestionAndAnswerRequest
     */
    webpageProperties?: WebpageProperties;
}

/**
 * Check if a given object implements the QuestionAndAnswerRequest interface.
 */
export function instanceOfQuestionAndAnswerRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QuestionAndAnswerRequestFromJSON(json: any): QuestionAndAnswerRequest {
    return QuestionAndAnswerRequestFromJSONTyped(json, false);
}

export function QuestionAndAnswerRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionAndAnswerRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'smartContentId': !exists(json, 'smartContentId') ? undefined : json['smartContentId'],
        'webpageProperties': !exists(json, 'webpageProperties') ? undefined : WebpagePropertiesFromJSON(json['webpageProperties']),
    };
}

export function QuestionAndAnswerRequestToJSON(value?: QuestionAndAnswerRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'smartContentId': value.smartContentId,
        'webpageProperties': WebpagePropertiesToJSON(value.webpageProperties),
    };
}

