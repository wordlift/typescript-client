/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Html } from './Html';
import {
    HtmlFromJSON,
    HtmlFromJSONTyped,
    HtmlToJSON,
} from './Html';

/**
 * The request
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * 
     * @type {Html}
     * @memberof Request
     */
    html?: Html;
    /**
     * The url of the page to analyze.
     * @type {string}
     * @memberof Request
     */
    url?: string;
    /**
     * The client which the analysis should use to extract the content, by default chrome is used.
     * @type {string}
     * @memberof Request
     */
    urlClient?: RequestUrlClientEnum;
    /**
     * The content language, 2 letters code, e.g. 'en'.
     * @type {string}
     * @memberof Request
     */
    language: string;
    /**
     * A textual fragment.
     * @type {string}
     * @memberof Request
     */
    text?: string;
    /**
     * An array of item IDs to exclude from the analysis results.
     * @type {Array<string>}
     * @memberof Request
     */
    exclude?: Array<string>;
    /**
     * The scope of the analysis, one of 'local', 'network', 'cloud-only', 'network-only' or 'all'.
     * @type {string}
     * @memberof Request
     */
    scope: string;
    /**
     * Filter out results that don't have at least the specified number of occurrences. By default 1.
     * @type {number}
     * @memberof Request
     */
    matches?: number;
    /**
     * When returning an interpolated HTML results, matches should have the 'wl-link' class. By default 'no'.
     * @type {string}
     * @memberof Request
     */
    links?: string;
}


/**
 * @export
 */
export const RequestUrlClientEnum = {
    Chrome: 'CHROME',
    PlainHttp: 'PLAIN_HTTP',
    ChromePlainHttp: 'CHROME, PLAIN_HTTP'
} as const;
export type RequestUrlClientEnum = typeof RequestUrlClientEnum[keyof typeof RequestUrlClientEnum];


/**
 * Check if a given object implements the Request interface.
 */
export function instanceOfRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "language" in value;
    isInstance = isInstance && "scope" in value;

    return isInstance;
}

export function RequestFromJSON(json: any): Request {
    return RequestFromJSONTyped(json, false);
}

export function RequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): Request {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'html': !exists(json, 'html') ? undefined : HtmlFromJSON(json['html']),
        'url': !exists(json, 'url') ? undefined : json['url'],
        'urlClient': !exists(json, 'urlClient') ? undefined : json['urlClient'],
        'language': json['language'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'exclude': !exists(json, 'exclude') ? undefined : json['exclude'],
        'scope': json['scope'],
        'matches': !exists(json, 'matches') ? undefined : json['matches'],
        'links': !exists(json, 'links') ? undefined : json['links'],
    };
}

export function RequestToJSON(value?: Request | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'html': HtmlToJSON(value.html),
        'url': value.url,
        'urlClient': value.urlClient,
        'language': value.language,
        'text': value.text,
        'exclude': value.exclude,
        'scope': value.scope,
        'matches': value.matches,
        'links': value.links,
    };
}

