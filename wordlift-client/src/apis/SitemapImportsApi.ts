/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SitemapImportRequest,
} from '../models/index';
import {
    SitemapImportRequestFromJSON,
    SitemapImportRequestToJSON,
} from '../models/index';

export interface CreateSitemapImportRequest {
    sitemapImportRequest: SitemapImportRequest;
}

/**
 * 
 */
export class SitemapImportsApi extends runtime.BaseAPI {

    /**
     * Create a Sitemap Import
     * Create
     */
    async createSitemapImportRaw(requestParameters: CreateSitemapImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['sitemapImportRequest'] == null) {
            throw new runtime.RequiredError(
                'sitemapImportRequest',
                'Required parameter "sitemapImportRequest" was null or undefined when calling createSitemapImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/sitemap-imports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SitemapImportRequestToJSON(requestParameters['sitemapImportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create a Sitemap Import
     * Create
     */
    async createSitemapImport(requestParameters: CreateSitemapImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.createSitemapImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
