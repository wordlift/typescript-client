/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutocompleteResult
 */
export interface AutocompleteResult {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    labels?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    descriptions?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    types?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    urls?: Array<string>;
    /**
     * A list of image URLs.
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    images?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AutocompleteResult
     */
    sameAss?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    scope?: AutocompleteResultScopeEnum;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    description?: string;
    /**
     * Schema type slug
     * @type {string}
     * @memberof AutocompleteResult
     */
    mainType?: string;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof AutocompleteResult
     */
    displayTypes?: string;
}


/**
 * @export
 */
export const AutocompleteResultScopeEnum = {
    Local: 'local',
    Network: 'network',
    Cloud: 'cloud'
} as const;
export type AutocompleteResultScopeEnum = typeof AutocompleteResultScopeEnum[keyof typeof AutocompleteResultScopeEnum];


/**
 * Check if a given object implements the AutocompleteResult interface.
 */
export function instanceOfAutocompleteResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutocompleteResultFromJSON(json: any): AutocompleteResult {
    return AutocompleteResultFromJSONTyped(json, false);
}

export function AutocompleteResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutocompleteResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'descriptions': !exists(json, 'descriptions') ? undefined : json['descriptions'],
        'types': !exists(json, 'types') ? undefined : json['types'],
        'urls': !exists(json, 'urls') ? undefined : json['urls'],
        'images': !exists(json, 'images') ? undefined : json['images'],
        'sameAss': !exists(json, 'sameAss') ? undefined : json['sameAss'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'mainType': !exists(json, 'mainType') ? undefined : json['mainType'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'displayTypes': !exists(json, 'displayTypes') ? undefined : json['displayTypes'],
    };
}

export function AutocompleteResultToJSON(value?: AutocompleteResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'labels': value.labels,
        'descriptions': value.descriptions,
        'types': value.types,
        'urls': value.urls,
        'images': value.images,
        'sameAss': value.sameAss,
        'scope': value.scope,
        'description': value.description,
        'mainType': value.mainType,
        'label': value.label,
        'value': value.value,
        'displayTypes': value.displayTypes,
    };
}

