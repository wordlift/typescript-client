/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntityGapRequest
 */
export interface EntityGapRequest {
    /**
     * The URL to analyze.
     * @type {string}
     * @memberof EntityGapRequest
     */
    url: string;
    /**
     * The search query to analyze.
     * @type {string}
     * @memberof EntityGapRequest
     */
    query: string;
    /**
     * The model
     * @type {string}
     * @memberof EntityGapRequest
     */
    model?: string;
    /**
     * Number of entities to highlight.
     * @type {number}
     * @memberof EntityGapRequest
     */
    numberOfEntities?: number;
    /**
     * The location name for the query, e.g. United Kingdom.
     * @type {string}
     * @memberof EntityGapRequest
     */
    queryLocationName?: string;
    /**
     * The search engine domain for the query, if not set will be chosen according to `query_location_name`
     * @type {string}
     * @memberof EntityGapRequest
     */
    querySearchEngine?: string;
}

/**
 * Check if a given object implements the EntityGapRequest interface.
 */
export function instanceOfEntityGapRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "query" in value;

    return isInstance;
}

export function EntityGapRequestFromJSON(json: any): EntityGapRequest {
    return EntityGapRequestFromJSONTyped(json, false);
}

export function EntityGapRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityGapRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'url': json['url'],
        'query': json['query'],
        'model': !exists(json, 'model') ? undefined : json['model'],
        'numberOfEntities': !exists(json, 'number_of_entities') ? undefined : json['number_of_entities'],
        'queryLocationName': !exists(json, 'query_location_name') ? undefined : json['query_location_name'],
        'querySearchEngine': !exists(json, 'query_search_engine') ? undefined : json['query_search_engine'],
    };
}

export function EntityGapRequestToJSON(value?: EntityGapRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'url': value.url,
        'query': value.query,
        'model': value.model,
        'number_of_entities': value.numberOfEntities,
        'query_location_name': value.queryLocationName,
        'query_search_engine': value.querySearchEngine,
    };
}

