/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A Word bias.
 * @export
 * @interface Word
 */
export interface Word {
    /**
     * The bias.
     * @type {number}
     * @memberof Word
     */
    bias: number;
    /**
     * The cluster of the word.
     * @type {string}
     * @memberof Word
     */
    cluster: string;
    /**
     * The content generation id.
     * @type {number}
     * @memberof Word
     */
    readonly contentGenerationId: number;
    /**
     * The create date-time.
     * @type {Date}
     * @memberof Word
     */
    readonly createdAt?: Date;
    /**
     * The unique id.
     * @type {number}
     * @memberof Word
     */
    readonly id?: number;
    /**
     * The last modified date-time.
     * @type {Date}
     * @memberof Word
     */
    readonly modifiedAt?: Date;
    /**
     * The token id for the word.
     * @type {string}
     * @memberof Word
     */
    tokenId: string;
    /**
     * The actual word.
     * @type {string}
     * @memberof Word
     */
    word: string;
}

/**
 * Check if a given object implements the Word interface.
 */
export function instanceOfWord(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "bias" in value;
    isInstance = isInstance && "cluster" in value;
    isInstance = isInstance && "contentGenerationId" in value;
    isInstance = isInstance && "tokenId" in value;
    isInstance = isInstance && "word" in value;

    return isInstance;
}

export function WordFromJSON(json: any): Word {
    return WordFromJSONTyped(json, false);
}

export function WordFromJSONTyped(json: any, ignoreDiscriminator: boolean): Word {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bias': json['bias'],
        'cluster': json['cluster'],
        'contentGenerationId': json['content_generation_id'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'modifiedAt': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'tokenId': json['token_id'],
        'word': json['word'],
    };
}

export function WordToJSON(value?: Word | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bias': value.bias,
        'cluster': value.cluster,
        'token_id': value.tokenId,
        'word': value.word,
    };
}

