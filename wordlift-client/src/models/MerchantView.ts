/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An array of objects.
 * @export
 * @interface MerchantView
 */
export interface MerchantView {
    /**
     * The Google merchant access token
     * @type {string}
     * @memberof MerchantView
     */
    accessToken: string;
    /**
     * The account id
     * @type {number}
     * @memberof MerchantView
     */
    readonly accountId?: number;
    /**
     * Whether the Merchant data will be synchronized automatically
     * @type {boolean}
     * @memberof MerchantView
     */
    automaticSynchronization?: boolean;
    /**
     * The create date-time
     * @type {Date}
     * @memberof MerchantView
     */
    readonly createdAt?: Date;
    /**
     * Custom seller entity - if applicable.
     * @type {string}
     * @memberof MerchantView
     */
    customSeller?: string;
    /**
     * The custom domain (for example data.example.org)
     * @type {string}
     * @memberof MerchantView
     * @deprecated
     */
    datasetDomain?: string;
    /**
     * The dataset path (for example /data)
     * @type {string}
     * @memberof MerchantView
     * @deprecated
     */
    datasetName?: string;
    /**
     * Default Products filter action to apply during sync process.
     * @type {string}
     * @memberof MerchantView
     */
    defaultProductsFilterAction: MerchantViewDefaultProductsFilterActionEnum;
    /**
     * True if the merchant has been deleted
     * @type {boolean}
     * @memberof MerchantView
     */
    deleted: boolean;
    /**
     * The delete date-time
     * @type {Date}
     * @memberof MerchantView
     */
    readonly deletedAt?: Date;
    /**
     * The Google Merchant id
     * @type {number}
     * @memberof MerchantView
     */
    googleMerchantId: number;
    /**
     * The unique id
     * @type {number}
     * @memberof MerchantView
     */
    readonly id?: number;
    /**
     * Whether to ignore the `brand` property during validation
     * @type {boolean}
     * @memberof MerchantView
     */
    ignoreBrand?: boolean;
    /**
     * Whether to ignore the `image` property during validation
     * @type {boolean}
     * @memberof MerchantView
     */
    ignoreImage?: boolean;
    /**
     * The last modified date-time
     * @type {Date}
     * @memberof MerchantView
     */
    readonly modifiedAt?: Date;
    /**
     * The publisher name (shows in schema publisher)
     * @type {string}
     * @memberof MerchantView
     */
    publisherName: string;
    /**
     * The Google merchant refresh token
     * @type {string}
     * @memberof MerchantView
     */
    refreshToken: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantView
     */
    sid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantView
     */
    syncHasErrors?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsCreated?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsDeleted?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsErrored?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsSkipped?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsUnchanged?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantView
     */
    syncProductsUpdated?: number;
    /**
     * The started date-time.
     * @type {Date}
     * @memberof MerchantView
     */
    readonly syncStartedAt?: Date;
    /**
     * The stopped date-time.
     * @type {Date}
     * @memberof MerchantView
     */
    readonly syncStoppedAt?: Date;
    /**
     * The website URL
     * @type {string}
     * @memberof MerchantView
     */
    url?: string;
    /**
     * Which strategy to use to write the url schema.
     * @type {string}
     * @memberof MerchantView
     */
    urlStrategy?: MerchantViewUrlStrategyEnum;
    /**
     * How to write the merchant data to the graph, if unsure, do not set anything (by default `wordpressMerchantWriter`).
     * @type {string}
     * @memberof MerchantView
     */
    writerService?: string;
}


/**
 * @export
 */
export const MerchantViewDefaultProductsFilterActionEnum = {
    Process: 'PROCESS',
    Ignore: 'IGNORE'
} as const;
export type MerchantViewDefaultProductsFilterActionEnum = typeof MerchantViewDefaultProductsFilterActionEnum[keyof typeof MerchantViewDefaultProductsFilterActionEnum];

/**
 * @export
 */
export const MerchantViewUrlStrategyEnum = {
    CanonicalLinkAndLink: 'canonicalLinkAndLink',
    CanonicalLinkOtherwiseLink: 'canonicalLinkOtherwiseLink'
} as const;
export type MerchantViewUrlStrategyEnum = typeof MerchantViewUrlStrategyEnum[keyof typeof MerchantViewUrlStrategyEnum];


/**
 * Check if a given object implements the MerchantView interface.
 */
export function instanceOfMerchantView(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "defaultProductsFilterAction" in value;
    isInstance = isInstance && "deleted" in value;
    isInstance = isInstance && "googleMerchantId" in value;
    isInstance = isInstance && "publisherName" in value;
    isInstance = isInstance && "refreshToken" in value;

    return isInstance;
}

export function MerchantViewFromJSON(json: any): MerchantView {
    return MerchantViewFromJSONTyped(json, false);
}

export function MerchantViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerchantView {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'accountId': !exists(json, 'account_id') ? undefined : json['account_id'],
        'automaticSynchronization': !exists(json, 'automatic_synchronization') ? undefined : json['automatic_synchronization'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'customSeller': !exists(json, 'custom_seller') ? undefined : json['custom_seller'],
        'datasetDomain': !exists(json, 'dataset_domain') ? undefined : json['dataset_domain'],
        'datasetName': !exists(json, 'dataset_name') ? undefined : json['dataset_name'],
        'defaultProductsFilterAction': json['default_products_filter_action'],
        'deleted': json['deleted'],
        'deletedAt': !exists(json, 'deleted_at') ? undefined : (new Date(json['deleted_at'])),
        'googleMerchantId': json['google_merchant_id'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ignoreBrand': !exists(json, 'ignore_brand') ? undefined : json['ignore_brand'],
        'ignoreImage': !exists(json, 'ignore_image') ? undefined : json['ignore_image'],
        'modifiedAt': !exists(json, 'modified_at') ? undefined : (new Date(json['modified_at'])),
        'publisherName': json['publisher_name'],
        'refreshToken': json['refresh_token'],
        'sid': !exists(json, 'sid') ? undefined : json['sid'],
        'syncHasErrors': !exists(json, 'sync_has_errors') ? undefined : json['sync_has_errors'],
        'syncId': !exists(json, 'sync_id') ? undefined : json['sync_id'],
        'syncProductsCreated': !exists(json, 'sync_products_created') ? undefined : json['sync_products_created'],
        'syncProductsDeleted': !exists(json, 'sync_products_deleted') ? undefined : json['sync_products_deleted'],
        'syncProductsErrored': !exists(json, 'sync_products_errored') ? undefined : json['sync_products_errored'],
        'syncProductsSkipped': !exists(json, 'sync_products_skipped') ? undefined : json['sync_products_skipped'],
        'syncProductsTotal': !exists(json, 'sync_products_total') ? undefined : json['sync_products_total'],
        'syncProductsUnchanged': !exists(json, 'sync_products_unchanged') ? undefined : json['sync_products_unchanged'],
        'syncProductsUpdated': !exists(json, 'sync_products_updated') ? undefined : json['sync_products_updated'],
        'syncStartedAt': !exists(json, 'sync_started_at') ? undefined : (new Date(json['sync_started_at'])),
        'syncStoppedAt': !exists(json, 'sync_stopped_at') ? undefined : (new Date(json['sync_stopped_at'])),
        'url': !exists(json, 'url') ? undefined : json['url'],
        'urlStrategy': !exists(json, 'url_strategy') ? undefined : json['url_strategy'],
        'writerService': !exists(json, 'writer_service') ? undefined : json['writer_service'],
    };
}

export function MerchantViewToJSON(value?: MerchantView | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access_token': value.accessToken,
        'automatic_synchronization': value.automaticSynchronization,
        'custom_seller': value.customSeller,
        'dataset_domain': value.datasetDomain,
        'dataset_name': value.datasetName,
        'default_products_filter_action': value.defaultProductsFilterAction,
        'deleted': value.deleted,
        'google_merchant_id': value.googleMerchantId,
        'ignore_brand': value.ignoreBrand,
        'ignore_image': value.ignoreImage,
        'publisher_name': value.publisherName,
        'refresh_token': value.refreshToken,
        'sid': value.sid,
        'sync_has_errors': value.syncHasErrors,
        'sync_id': value.syncId,
        'sync_products_created': value.syncProductsCreated,
        'sync_products_deleted': value.syncProductsDeleted,
        'sync_products_errored': value.syncProductsErrored,
        'sync_products_skipped': value.syncProductsSkipped,
        'sync_products_total': value.syncProductsTotal,
        'sync_products_unchanged': value.syncProductsUnchanged,
        'sync_products_updated': value.syncProductsUpdated,
        'url': value.url,
        'url_strategy': value.urlStrategy,
        'writer_service': value.writerService,
    };
}

