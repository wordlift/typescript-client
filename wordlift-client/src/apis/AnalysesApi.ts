/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalysesRequest,
  AnalysesResponse,
  Request,
  Response,
} from '../models';
import {
    AnalysesRequestFromJSON,
    AnalysesRequestToJSON,
    AnalysesResponseFromJSON,
    AnalysesResponseToJSON,
    RequestFromJSON,
    RequestToJSON,
    ResponseFromJSON,
    ResponseToJSON,
} from '../models';

export interface AnalyseRequest {
    request: Request;
}

export interface CreateRequest {
    analysesRequest: AnalysesRequest;
}

export interface MergeRequest {
    request: Request;
}

export interface V2AnalysisRequest {
    request: Request;
}

/**
 * 
 */
export class AnalysesApi extends runtime.BaseAPI {

    /**
     * Analyze the content provided with the request.
     * Analyse content
     */
    async analyseRaw(requestParameters: AnalyseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling analyse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/single`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseFromJSON(jsonValue));
    }

    /**
     * Analyze the content provided with the request.
     * Analyse content
     */
    async analyse(requestParameters: AnalyseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.analyseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an analysis request
     * Create
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalysesResponse>> {
        if (requestParameters.analysesRequest === null || requestParameters.analysesRequest === undefined) {
            throw new runtime.RequiredError('analysesRequest','Required parameter requestParameters.analysesRequest was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/analysis/analyses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalysesRequestToJSON(requestParameters.analysesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysesResponseFromJSON(jsonValue));
    }

    /**
     * Create an analysis request
     * Create
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalysesResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Analyze content and return the results merged as HTML code.
     * Analyse and Merge
     */
    async mergeRaw(requestParameters: MergeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling merge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/merge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestToJSON(requestParameters.request),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Analyze content and return the results merged as HTML code.
     * Analyse and Merge
     */
    async merge(requestParameters: MergeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.mergeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Analyse the content of a webpage by using the `url` property of the request.
     * Analyse Web Page
     */
    async v2AnalysisRaw(requestParameters: V2AnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Response>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling v2Analysis.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/v2/analyze`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseFromJSON(jsonValue));
    }

    /**
     * Analyse the content of a webpage by using the `url` property of the request.
     * Analyse Web Page
     */
    async v2Analysis(requestParameters: V2AnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Response> {
        const response = await this.v2AnalysisRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
