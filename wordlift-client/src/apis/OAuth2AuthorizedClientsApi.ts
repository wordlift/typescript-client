/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OAuth2AuthorizedClient,
  OAuth2AuthorizedClientRequest,
  PageOAuth2AuthorizedClient,
} from '../models/index';
import {
    OAuth2AuthorizedClientFromJSON,
    OAuth2AuthorizedClientToJSON,
    OAuth2AuthorizedClientRequestFromJSON,
    OAuth2AuthorizedClientRequestToJSON,
    PageOAuth2AuthorizedClientFromJSON,
    PageOAuth2AuthorizedClientToJSON,
} from '../models/index';

export interface CreateOAuth2AuthorizedClientRequest {
    oAuth2AuthorizedClientRequest: OAuth2AuthorizedClientRequest;
}

export interface DeleteOAuth2AuthorizedClientRequest {
    id: number;
}

export interface GetOAuth2AuthorizedClientRequest {
    id: number;
}

export interface ListOAuth2AuthorizedClientsRequest {
    cursor?: string;
    limit?: number;
}

export interface UpdateOAuth2AuthorizedClientRequest {
    id: number;
    oAuth2AuthorizedClientRequest: OAuth2AuthorizedClientRequest;
}

/**
 * 
 */
export class OAuth2AuthorizedClientsApi extends runtime.BaseAPI {

    /**
     * Create a OAuth2 Authorized Client
     * Create
     */
    async createOAuth2AuthorizedClientRaw(requestParameters: CreateOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizedClient>> {
        if (requestParameters['oAuth2AuthorizedClientRequest'] == null) {
            throw new runtime.RequiredError(
                'oAuth2AuthorizedClientRequest',
                'Required parameter "oAuth2AuthorizedClientRequest" was null or undefined when calling createOAuth2AuthorizedClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/oauth2/authorized-clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuth2AuthorizedClientRequestToJSON(requestParameters['oAuth2AuthorizedClientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizedClientFromJSON(jsonValue));
    }

    /**
     * Create a OAuth2 Authorized Client
     * Create
     */
    async createOAuth2AuthorizedClient(requestParameters: CreateOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizedClient> {
        const response = await this.createOAuth2AuthorizedClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a OAuth2 Authorized Client given its client registration id
     * Delete
     */
    async deleteOAuth2AuthorizedClientRaw(requestParameters: DeleteOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteOAuth2AuthorizedClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/oauth2/authorized-clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a OAuth2 Authorized Client given its client registration id
     * Delete
     */
    async deleteOAuth2AuthorizedClient(requestParameters: DeleteOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOAuth2AuthorizedClientRaw(requestParameters, initOverrides);
    }

    /**
     * Get a OAuth2 Authorized Client given its client registration id
     * Get
     */
    async getOAuth2AuthorizedClientRaw(requestParameters: GetOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizedClient>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getOAuth2AuthorizedClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/oauth2/authorized-clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizedClientFromJSON(jsonValue));
    }

    /**
     * Get a OAuth2 Authorized Client given its client registration id
     * Get
     */
    async getOAuth2AuthorizedClient(requestParameters: GetOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizedClient> {
        const response = await this.getOAuth2AuthorizedClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List OAuth2 Authorized Clients
     * List
     */
    async listOAuth2AuthorizedClientsRaw(requestParameters: ListOAuth2AuthorizedClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOAuth2AuthorizedClient>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/oauth2/authorized-clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOAuth2AuthorizedClientFromJSON(jsonValue));
    }

    /**
     * List OAuth2 Authorized Clients
     * List
     */
    async listOAuth2AuthorizedClients(requestParameters: ListOAuth2AuthorizedClientsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOAuth2AuthorizedClient> {
        const response = await this.listOAuth2AuthorizedClientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a OAuth2 Authorized Client given its client registration id
     * Update
     */
    async updateOAuth2AuthorizedClientRaw(requestParameters: UpdateOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizedClient>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateOAuth2AuthorizedClient().'
            );
        }

        if (requestParameters['oAuth2AuthorizedClientRequest'] == null) {
            throw new runtime.RequiredError(
                'oAuth2AuthorizedClientRequest',
                'Required parameter "oAuth2AuthorizedClientRequest" was null or undefined when calling updateOAuth2AuthorizedClient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/oauth2/authorized-clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OAuth2AuthorizedClientRequestToJSON(requestParameters['oAuth2AuthorizedClientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizedClientFromJSON(jsonValue));
    }

    /**
     * Update a OAuth2 Authorized Client given its client registration id
     * Update
     */
    async updateOAuth2AuthorizedClient(requestParameters: UpdateOAuth2AuthorizedClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizedClient> {
        const response = await this.updateOAuth2AuthorizedClientRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
