/* tslint:disable */
/* eslint-disable */
/**
 * Embeddings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An array of objects.
 * @export
 * @interface WithLimits
 */
export interface WithLimits {
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    accountLimits?: number;
    /**
     * 
     * @type {string}
     * @memberof WithLimits
     */
    appliesTo: string;
    /**
     * 
     * @type {boolean}
     * @memberof WithLimits
     */
    block?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    consumption?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    limits?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    referenceId?: number;
    /**
     * 
     * @type {string}
     * @memberof WithLimits
     */
    referenceType?: WithLimitsReferenceTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    remaining?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    resetsInSeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof WithLimits
     */
    subscriptionLimits?: number;
}


/**
 * @export
 */
export const WithLimitsReferenceTypeEnum = {
    Subscription: 'SUBSCRIPTION',
    Account: 'ACCOUNT'
} as const;
export type WithLimitsReferenceTypeEnum = typeof WithLimitsReferenceTypeEnum[keyof typeof WithLimitsReferenceTypeEnum];


/**
 * Check if a given object implements the WithLimits interface.
 */
export function instanceOfWithLimits(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appliesTo" in value;

    return isInstance;
}

export function WithLimitsFromJSON(json: any): WithLimits {
    return WithLimitsFromJSONTyped(json, false);
}

export function WithLimitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WithLimits {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountLimits': !exists(json, 'account_limits') ? undefined : json['account_limits'],
        'appliesTo': json['applies_to'],
        'block': !exists(json, 'block') ? undefined : json['block'],
        'consumption': !exists(json, 'consumption') ? undefined : json['consumption'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'limits': !exists(json, 'limits') ? undefined : json['limits'],
        'referenceId': !exists(json, 'reference_id') ? undefined : json['reference_id'],
        'referenceType': !exists(json, 'reference_type') ? undefined : json['reference_type'],
        'remaining': !exists(json, 'remaining') ? undefined : json['remaining'],
        'resetsInSeconds': !exists(json, 'resets_in_seconds') ? undefined : json['resets_in_seconds'],
        'subscriptionLimits': !exists(json, 'subscription_limits') ? undefined : json['subscription_limits'],
    };
}

export function WithLimitsToJSON(value?: WithLimits | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account_limits': value.accountLimits,
        'applies_to': value.appliesTo,
        'block': value.block,
        'consumption': value.consumption,
        'id': value.id,
        'limits': value.limits,
        'reference_id': value.referenceId,
        'reference_type': value.referenceType,
        'remaining': value.remaining,
        'resets_in_seconds': value.resetsInSeconds,
        'subscription_limits': value.subscriptionLimits,
    };
}

